<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.Deployment</name>
    </assembly>
    <members>
        <member name="T:Neon.Deployment.AwsCli">
            <summary>
            <para>
            Wraps the AWS-CLI with methods for common operations.
            </para>
            <note>
            The class methods require that the <b>AWS_ACCESS_KEY_ID</b> and <b>AWS_SECRET_ACCESS_KEY</b>
            environment variables be already set with the required AWS credentials.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Deployment.AwsCli.IsS3Transient(System.Exception)">
            <summary>
            Used to detect transient exceptions.
            </summary>
            <param name="e">The potential transient exceptiopn.</param>
            <returns><c>true</c> when the exception is transient.</returns>
        </member>
        <member name="M:Neon.Deployment.AwsCli.Execute(System.String[])">
            <summary>
            Executes an AWS-CLI command.
            </summary>
            <param name="args">The command and arguments.</param>
            <returns>The <see cref="T:Neon.Common.ExecuteResponse"/> with the exit status and command output.</returns>
        </member>
        <member name="M:Neon.Deployment.AwsCli.ExecuteSafe(System.String[])">
            <summary>
            Executes an AWS-CLI command, ensuring that it completed without error.
            </summary>
            <param name="args">The command and arguments.</param>
            <exception cref="T:Neon.Common.ExecuteException">Thrown for command errors.</exception>
        </member>
        <member name="M:Neon.Deployment.AwsCli.AddDebugOption(System.Collections.Generic.List{System.String})">
            <summary>
            Used to add the <b>--debug</b> option to the AWS CLI command line arguments
            when debugging.
            </summary>
            <param name="args">The argument list.</param>
            <returns>The argument list with the debug option, when enabled.</returns>
        </member>
        <member name="M:Neon.Deployment.AwsCli.SetCredentials(System.String,System.String,System.String,System.String)">
            <summary>
            Sets the AWS credential environment variables by loading them from 1Password.
            </summary>
            <param name="awsAccessKeyId">Optionally overrides the AWS access key ID 1Password secret name.</param>
            <param name="awsSecretAccessKey">Optionally overrides the AWS access key 1Password secret name.</param>
            <param name="vault">Optionally overrides the current user's 1Password vault.</param>
            <param name="masterPassword">Optionally specifies the master 1Password.</param>
        </member>
        <member name="M:Neon.Deployment.AwsCli.RemoveCredentials">
            <summary>
            Removes the AWS credential environment variables.
            </summary>
        </member>
        <member name="M:Neon.Deployment.AwsCli.S3Upload(System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Uploads a file from the local workstation to S3.
            </summary>
            <param name="sourcePath">The source file path.</param>
            <param name="targetUri">
            The target S3 URI.  This may be either an <b>s3://BUCKET/KEY</b> or a
            <b>https://s3.REGION.amazonaws.com/BUCKET/KEY</b> URI referencing an S3 
            bucket and key.
            </param>
            <param name="gzip">Optionally indicates that the target content encoding should be set to <b>gzip</b>.</param>
            <param name="metadata">
            <para>
            Optionally specifies HTTP metadata headers to be returned when the object
            is downloaded from S3.  This formatted as as comma separated a list of 
            key/value pairs like:
            </para>
            <example>
            Content-Type=text,app-version=1.0.0
            </example>
            <note>
            <para>
            AWS supports <b>system</b> as well as <b>custom</b> headers.  System headers
            include standard HTTP headers such as <b>Content-Type</b> and <b>Content-Encoding</b>.
            Custom headers are required to include the <b>x-amz-meta-</b> prefix.
            </para>
            <para>
            You don't need to specify the <b>x-amz-meta-</b> prefix for setting custom 
            headers; the AWS-CLI detects custom header names and adds the prefix automatically. 
            This method will strip the prefix if present before calling the AWS-CLI to ensure 
            the prefix doesn't end up being duplicated.
            </para>
            </note>
            </param>
            <param name="publicReadAccess">Optionally grant the upload public read access.</param>
        </member>
        <member name="M:Neon.Deployment.AwsCli.S3Upload(System.IO.Stream,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Uploads the contents of a stream to an S3 bucket.
            </summary>
            <param name="input">The input stream.</param>
            <param name="targetUri">
            The target S3 URI.  This may be either an <b>s3://BUCKET/KEY</b> or a
            <b>https://s3.REGION.amazonaws.com/BUCKET/KEY</b> URI referencing an S3 
            bucket and key.
            </param>
            <param name="gzip">Optionally indicates that the target content encoding should be set to <b>gzip</b>.</param>
            <param name="metadata">
            <para>
            Optionally specifies HTTP metadata headers to be returned when the object
            is downloaded from S3.  This formatted as as comma separated a list of 
            key/value pairs like:
            </para>
            <example>
            Content-Type=text,app-version=1.0.0
            </example>
            <note>
            <para>
            AWS supports <b>system</b> as well as <b>custom</b> headers.  System headers
            include standard HTTP headers such as <b>Content-Type</b> and <b>Content-Encoding</b>.
            Custom headers are required to include the <b>x-amz-meta-</b> prefix.
            </para>
            <para>
            You don't need to specify the <b>x-amz-meta-</b> prefix for setting custom 
            headers; the AWS-CLI detects custom header names and adds the prefix automatically. 
            This method will strip the prefix if present before calling the AWS-CLI to ensure 
            the prefix doesn't end up being duplicated.
            </para>
            </note>
            </param>
            <param name="publicReadAccess">Optionally grant the upload public read access.</param>
        </member>
        <member name="M:Neon.Deployment.AwsCli.S3UploadText(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Uploads text to an S3 bucket.
            </summary>
            <param name="text">The text being uploaded.</param>
            <param name="targetUri">
            The target S3 URI.  This may be either an <b>s3://BUCKET/KEY</b> or a
            <b>https://s3.REGION.amazonaws.com/BUCKET/KEY</b> URI referencing an S3 
            bucket and key.
            </param>
            <param name="gzip">Optionally indicates that the target content encoding should be set to <b>gzip</b>.</param>
            <param name="metadata">
            <para>
            Optionally specifies HTTP metadata headers to be returned when the object
            is downloaded from S3.  This formatted as as comma separated a list of 
            key/value pairs like:
            </para>
            <example>
            Content-Type=text,app-version=1.0.0
            </example>
            <note>
            <para>
            AWS supports <b>system</b> as well as <b>custom</b> headers.  System headers
            include standard HTTP headers such as <b>Content-Type</b> and <b>Content-Encoding</b>.
            Custom headers are required to include the <b>x-amz-meta-</b> prefix.
            </para>
            <para>
            You don't need to specify the <b>x-amz-meta-</b> prefix for setting custom 
            headers; the AWS-CLI detects custom header names and adds the prefix automatically. 
            This method will strip the prefix if present before calling the AWS-CLI to ensure 
            the prefix doesn't end up being duplicated.
            </para>
            </note>
            </param>
            <param name="publicReadAccess">Optionally grant the upload public read access.</param>
            <param name="encoding">Optionally specifies the text encoding.  This defaults to <see cref="P:System.Text.Encoding.UTF8"/>.</param>
        </member>
        <member name="M:Neon.Deployment.AwsCli.S3UploadBytes(System.Byte[],System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Uploads a byte array to an S3 bucket.
            </summary>
            <param name="bytes">The byte array being uploaded.</param>
            <param name="targetUri">
            The target S3 URI.  This may be either an <b>s3://BUCKET/KEY</b> or a
            <b>https://s3.REGION.amazonaws.com/BUCKET/KEY</b> URI referencing an S3 
            bucket and key.
            </param>
            <param name="gzip">Optionally indicates that the target content encoding should be set to <b>gzip</b>.</param>
            <param name="metadata">
            <para>
            Optionally specifies HTTP metadata headers to be returned when the object
            is downloaded from S3.  This formatted as as comma separated a list of 
            key/value pairs like:
            </para>
            <example>
            Content-Type=text,app-version=1.0.0
            </example>
            <note>
            <para>
            AWS supports <b>system</b> as well as <b>custom</b> headers.  System headers
            include standard HTTP headers such as <b>Content-Type</b> and <b>Content-Encoding</b>.
            Custom headers are required to include the <b>x-amz-meta-</b> prefix.
            </para>
            <para>
            You don't need to specify the <b>x-amz-meta-</b> prefix for setting custom 
            headers; the AWS-CLI detects custom header names and adds the prefix automatically. 
            This method will strip the prefix if present before calling the AWS-CLI to ensure 
            the prefix doesn't end up being duplicated.
            </para>
            </note>
            </param>
            <param name="publicReadAccess">Optionally grant the upload public read access.</param>
        </member>
        <member name="M:Neon.Deployment.AwsCli.S3Download(System.String,System.String)">
            <summary>
            Downloads a file from S3.
            </summary>
            <param name="sourceUri">
            The target S3 URI.  This may be either an <b>s3://BUCKET/KEY</b> or a
            <b>https://s3.REGION.amazonaws.com/BUCKET/KEY</b> URI referencing an S3 
            bucket and key.
            </param>
            <param name="targetPath">The target file path.</param>
        </member>
        <member name="M:Neon.Deployment.AwsCli.S3DownloadText(System.String,System.Text.Encoding)">
            <summary>
            Downloads a file from S3 as text.
            </summary>
            <param name="sourceUri">
            The target S3 URI.  This may be either an <b>s3://BUCKET/KEY</b> or a
            <b>https://s3.REGION.amazonaws.com/BUCKET/KEY</b> URI referencing an S3 
            bucket and key.
            </param>
            <param name="encoding">Optionally specifies the character encoding.  This defaults to <see cref="P:System.Text.Encoding.UTF8"/>.</param>
        </member>
        <member name="M:Neon.Deployment.AwsCli.S3DownloadBytes(System.String)">
            <summary>
            Downloads a file from S3 as a byte array.
            </summary>
            <param name="sourceUri">
            The target S3 URI.  This may be either an <b>s3://BUCKET/KEY</b> or a
            <b>https://s3.REGION.amazonaws.com/BUCKET/KEY</b> URI referencing an S3 
            bucket and key.
            </param>
        </member>
        <member name="M:Neon.Deployment.AwsCli.S3UploadMultiPart(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Int64,System.Boolean,System.Action{System.Int64})">
            <summary>
            <para>
            Uploads a file in multiple parts from the local workstation to S3, returning the
            <see cref="T:Neon.Deployment.DownloadManifest"/> details. required by <see cref="M:Neon.Deployment.DeploymentHelper.DownloadMultiPart(Neon.Deployment.DownloadManifest,System.String,Neon.Deployment.DownloadProgressDelegate,Neon.Retry.IRetryPolicy,System.TimeSpan,System.Boolean)"/>
            and <see cref="M:Neon.Deployment.DeploymentHelper.DownloadMultiPartAsync(Neon.Deployment.DownloadManifest,System.String,Neon.Deployment.DownloadProgressDelegate,System.TimeSpan,Neon.Retry.IRetryPolicy,System.Boolean,System.Threading.CancellationToken)"/>
            to actually download the entire file.  The URI to the uploaded <see cref="T:Neon.Deployment.DownloadManifest"/> details is also returned.
            </para>
            <para>
            See the remarks for details about how this works.
            </para>
            </summary>
            <param name="sourcePath">Path to the file being uploaded.</param>
            <param name="targetFolderUri">
            <para>
            The target S3 URI structured like <b>https://s3.REGION.amazonaws.com/BUCKET/...</b> 
            URI referencing an S3 bucket and the optional folder where the file's download information 
            and parts will be uploaded.
            </para>
            <note>
            The <b>s3://</b> URI scheme is not supported.
            </note>
            </param>
            <param name="version">Optionally specifies the download file version.</param>
            <param name="name">Optionally overrides the download file name specified by <paramref name="sourcePath"/> to initialize <see cref="P:Neon.Deployment.DownloadManifest.Name"/>.</param>
            <param name="filename">Optionally overrides the download file name specified by <paramref name="sourcePath"/> to initialize <see cref="P:Neon.Deployment.DownloadManifest.Filename"/>.</param>
            <param name="noMd5File">
            This method creates a file named [<paramref name="sourcePath"/>.md5] with the MD5 hash for the entire
            uploaded file by default.  You may override this behavior by passing <paramref name="noMd5File"/>=<c>true</c>.
            </param>
            <param name="maxPartSize">Optionally overrides the maximum part size (defaults to 75 MiB).</param>
            <param name="publicReadAccess">Optionally grant the upload public read access.</param>
            <param name="progressAction">Optional action called as the file is uploaded, passing the <c>long</c> percent complete.</param>
            <returns>The <see cref="T:Neon.Deployment.DownloadManifest"/> information as well as the URI to the uploaded manifest.</returns>
            <remarks>
            <para>
            This method works by splitting the <paramref name="sourcePath"/> file into parts no larger than 
            <paramref name="maxPartSize"/> bytes each and the uploading these parts to the specified bucket
            and path along with a file holding <see cref="T:Neon.Deployment.DownloadManifest"/> information describing the download
            and its constituent parts.  This information includes details about the download including the
            overall MD5 and size as well records describing each part including their URIs, sizes and MD5.
            </para>
            <para>
            The <see cref="T:Neon.Deployment.DownloadManifest"/> details returned include all of the information required by
            <see cref="M:Neon.Deployment.DeploymentHelper.DownloadMultiPart(Neon.Deployment.DownloadManifest,System.String,Neon.Deployment.DownloadProgressDelegate,Neon.Retry.IRetryPolicy,System.TimeSpan,System.Boolean)"/> and
            <see cref="M:Neon.Deployment.DeploymentHelper.DownloadMultiPartAsync(Neon.Deployment.DownloadManifest,System.String,Neon.Deployment.DownloadProgressDelegate,System.TimeSpan,Neon.Retry.IRetryPolicy,System.Boolean,System.Threading.CancellationToken)"/>
            to actually download the entire file and the URI returned references these msame details as
            uploaded to S3.
            </para>
            <para>
            You'll need to pass <paramref name="sourcePath"/> as the path to the file being uploaded 
            and <paramref name="targetFolderUri"/> as the S3 location where the download information and the
            file parts will be uploaded.  <paramref name="targetFolderUri"/> may use with the <b>https://</b>
            or <b>s3://</b> URI scheme.
            </para>
            <para>
            By default the uploaded file and parts names will be based on the filename part of <paramref name="sourcePath"/>,
            but this can be overridden via <paramref name="filename"/>.  The <see cref="T:Neon.Deployment.DownloadManifest"/> information for the
            file will be uploaded as <b>FILENAME.manifest</b> and the parts will be written to a subfolder named
            <b>FILENAME.parts</b>.  For example, uploading a large file named <b>myfile.json</b> to <b>https://s3.uswest.amazonaws.com/mybucket</b>
            will result S3 file layout like:
            </para>
            <code>
            https://s3.uswest.amazonaws.com/mybucket
                myfile.json.manifest
                myfile.json.parts/
                    part-0000
                    part-0001
                    part-0002
                    ...
            </code>
            <para>
            The URI returned in this case will be <b>https://s3.uswest.amazonaws.com/mybucket/myfile.json.manifest</b>.
            </para>
            <note>
            This method uses two threads for uploading the parts because it seems to take
            the <b>AWS CLI</b> tool several seconds to actually start the upload, resulting
            in a lot of wasted uploading time.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Deployment.AwsCli.S3Remove(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Removes one S3 objects.
            </summary>
            <param name="targetUri">
            The target S3 URI or prefix for the object(s) to be removed.  This may be either an
            <b>s3://BUCKET[/KEY]</b> or a <b>https://s3.REGION.amazonaws.com/BUCKET[/KEY]</b> URI 
            referencing an S3 bucket and key.  Note that the key is optional which means that all
            objects in the bucket are eligible for removal.
            </param>
            <param name="recursive">
            Optionally indicates <paramref name="targetUri"/> specifies a folder prefix and that
            all objects within the folder are eligble for removal.
            </param>
            <param name="include">Optionally specifies a pattern specifying the objects to be removed.</param>
            <param name="exclude">Optionally specifies a pattern specifying objects to be excluded from removal.</param>
        </member>
        <member name="T:Neon.Deployment.CodeSigning.AzureProfile">
            <summary>
            Defines parameters required for code signing via <b>Azure Code Signing</b>.
            </summary>
        </member>
        <member name="M:Neon.Deployment.CodeSigning.AzureProfile.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="azureTenantId">Specifies the Azure tenent ID for the key vault.</param>
            <param name="azureClientId">Specifies the Azure client ID used for authenticating the signing request.</param>
            <param name="azureClientSecret">Specifies the Azure client secret used for authenticating the signing request. </param>
            <param name="codeSigningAccountEndpoint">Specifies the code signing account endpoint.</param>
            <param name="codeSigningAccountName">Specifies the name of the Azure code signing account being used.</param>
            <param name="certificateProfileName">Specifies the signing certificate name within the code signing account.</param>
            <param name="correlationId">
            Optionally specifies an opaque ID that will be logged by Azure for the signing operation.  This may
            be useful for auditing, depending on the scenario.
            </param>
        </member>
        <member name="P:Neon.Deployment.CodeSigning.AzureProfile.AzureTenantId">
            <summary>
            Returns the Azure tenent ID for the key vault.
            </summary>
        </member>
        <member name="P:Neon.Deployment.CodeSigning.AzureProfile.AzureClientId">
            <summary>
            Returns the client ID used for authenticating the signing request.
            </summary>
        </member>
        <member name="P:Neon.Deployment.CodeSigning.AzureProfile.AzureClientSecret">
            <summary>
            Returns the secret used for authenticating the signing request. 
            </summary>
        </member>
        <member name="P:Neon.Deployment.CodeSigning.AzureProfile.CodeSigningAccountEndpoint">
            <summary>
            Returns the URL for the Azure key vault holding the signing certificate.
            </summary>
        </member>
        <member name="P:Neon.Deployment.CodeSigning.AzureProfile.CodeSigningAccountName">
            <summary>
            Returns the name of the Azure code signing account being used.
            </summary>
        </member>
        <member name="P:Neon.Deployment.CodeSigning.AzureProfile.CertificateProfileName">
            <summary>
            Returns the signing certificate name within the key vault.
            </summary>
        </member>
        <member name="P:Neon.Deployment.CodeSigning.AzureProfile.CorrelationId">
            <summary>
            Returns the optional correlation ID.
            </summary>
        </member>
        <member name="T:Neon.Deployment.CodeSigning.CodeSigner">
            <summary>
            Implements code signing.
            </summary>
        </member>
        <member name="M:Neon.Deployment.CodeSigning.CodeSigner.IsReady(Neon.Deployment.CodeSigning.UsbTokenProfile)">
            <summary>
            Verifies that the current machine is ready for code signing using a USB code signing token and the Microsoft Built Tools <b>signtool</b> program.
            </summary>
            <param name="profile">Specifies a <see cref="T:Neon.Deployment.CodeSigning.UsbTokenProfile"/> with the required signing prarameters.</param>
            <returns><c>true</c> when the signing token is available and the profile ius correct.</returns>
            <exception cref="T:System.PlatformNotSupportedException">Thrown when executed on a non 64-bit Windows machine.</exception>
            <remarks>
            <note>
            <b>WARNING!</b> Be very careful when using this method with Extended Validation (EV) code signing 
            USB tokens.  Using an incorrect password can brkick EV tokens since thay typically allow only a 
            very limited number of signing attempts with invalid passwords.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Deployment.CodeSigning.CodeSigner.GetSignToolPath(System.String)">
            <summary>
            Returns the path to the <b>SignTool</b> located within the specified installation folder.
            </summary>
            <param name="installFolder">Specifies the installation folder.</param>
            <returns>Tha path.</returns>
        </member>
        <member name="M:Neon.Deployment.CodeSigning.CodeSigner.GetAzureCodeSignDllPath(System.String)">
            <summary>
            Returns the path to the <b>Azure signing DLL</b> located within the specified installation folder.
            </summary>
            <param name="installFolder">Specifies the installation folder.</param>
            <returns>Tha path.</returns>
        </member>
        <member name="M:Neon.Deployment.CodeSigning.CodeSigner.CheckAzureSignToolCache">
            <summary>
            Checks the NeonSDK Azure code signing tool cache folder to see if it's up-to-date,
            returning <c>true</c> when it is current otherwise this method clears
            the folder and returns, <c>false</c>, indicating that the signing client
            binaries need to be installed.
            </summary>
            <returns><c>true</c> when the cache folder is up-to-date.</returns>
        </member>
        <member name="M:Neon.Deployment.CodeSigning.CodeSigner.Sign(Neon.Deployment.CodeSigning.AzureProfile,System.String)">
            <summary>
            Signs an EXE, DLL or MSI file using Azure Code Signing using the <b>AzureSignTool</b>.
            </summary>
            <param name="profile">Specifies a <see cref="T:Neon.Deployment.CodeSigning.UsbTokenProfile"/> with the required signing prarameters.</param>
            <param name="targetPath">Specifies the path to the file being signed.</param>
            <exception cref="T:System.PlatformNotSupportedException">Thrown when executed on a non 64-bit Windows machine.</exception>
        </member>
        <member name="M:Neon.Deployment.CodeSigning.CodeSigner.CheckUsbSignToolCache">
            <summary>
            Checks the NeonSDK USB Token signing tool cache folder to see if it's up-to-date,
            returning <c>true</c> when it is current otherwise this method clears
            the folder and returns, <c>false</c>, indicating that the signing client
            binaries need to be installed.
            </summary>
            <returns><c>true</c> when the cache folder is up-to-date.</returns>
        </member>
        <member name="M:Neon.Deployment.CodeSigning.CodeSigner.Sign(Neon.Deployment.CodeSigning.UsbTokenProfile,System.String)">
            <summary>
            Signs an EXE, DLL or MSI file using a USB code signing certificate and the <b>SignTool</b> from the Microsoft Built Tools.
            </summary>
            <param name="profile">Specifies a <see cref="T:Neon.Deployment.CodeSigning.UsbTokenProfile"/> with the required signing prarameters.</param>
            <param name="targetPath">Specifies the path to the file being signed.</param>
            <exception cref="T:System.PlatformNotSupportedException">Thrown when executed on a non 64-bit Windows machine.</exception>
            <remarks>
            <note>
            <b>WARNING!</b> Be very careful when using this method with Extended Validation (EV) code signing 
            USB tokens.  Using an incorrect password can brick EV tokens since thay typically allow only a 
            very limited number of signing attempts with invalid passwords.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Deployment.CodeSigning.CodeSigner.InstallSignTool(System.String,System.Boolean)">
            <summary>
            Downloads and installs the <b>SignTool</b> binary.
            </summary>
            <param name="installFolder">The folder where the tool will be installed.</param>
            <param name="toolsAlreadyCached">Indicates when the client signing tools are already cached.</param>
            <returns>The path to the <b>SignTool</b> binary.</returns>
        </member>
        <member name="M:Neon.Deployment.CodeSigning.CodeSigner.InstallSigningDll(System.String,System.Boolean)">
            <summary>
            Downloads and installs the <b>Azure.CodeSigning.Dlib</b> DLL.
            </summary>
            <param name="installFolder">The folder where the DLL will be installed.</param>
            <param name="toolsAlreadyCached">Indicates when the client signing tools are already cached.</param>
            <returns>The path to the installed DLL.</returns>
        </member>
        <member name="M:Neon.Deployment.CodeSigning.CodeSigner.ExtractTestBinaryTo(System.String)">
            <summary>
            Extracts the <b>SignTool.exe</b> binary from the embedded resource
            to the specified path.
            </summary>
            <param name="targetPath">The target path for the binary.</param>
        </member>
        <member name="T:Neon.Deployment.CodeSigning.UsbTokenProfile">
            <summary>
            Defines parameters required for code signing using SignTool with a USB code signing token.
            </summary>
        </member>
        <member name="M:Neon.Deployment.CodeSigning.UsbTokenProfile.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="provider">Specifies the certificate provider, like: "eToken Base Cryptographic Provider"</param>
            <param name="certBase64">Specifies the base64 encoded public certificate (multi-line values are allowed).</param>
            <param name="container">Specifies the certificate container, like: "Sectigo_20220830143311"</param>
            <param name="timestampUri">Specifies the URI for the certificate timestamp service, like: http://timestamp.sectigo.com</param>
            <param name="password">Specifies the certificate password.</param>
        </member>
        <member name="P:Neon.Deployment.CodeSigning.UsbTokenProfile.TargetPath">
            <summary>
            Returns the path to the file being signed.
            </summary>
        </member>
        <member name="P:Neon.Deployment.CodeSigning.UsbTokenProfile.Provider">
            <summary>
            Returns the certificate provider, like: "eToken Base Cryptographic Provider"
            </summary>
        </member>
        <member name="P:Neon.Deployment.CodeSigning.UsbTokenProfile.CertBase64">
            <summary>
            Returns the base64 encoded public certificate (multi-line values are allowed).
            </summary>
        </member>
        <member name="P:Neon.Deployment.CodeSigning.UsbTokenProfile.Container">
            <summary>
            Returns the certificate container, like: "Sectigo_20220830143311"
            </summary>
        </member>
        <member name="P:Neon.Deployment.CodeSigning.UsbTokenProfile.TimestampUri">
            <summary>
            Returns the URI for the certificate timestamp service, like: http://timestamp.sectigo.com
            </summary>
        </member>
        <member name="P:Neon.Deployment.CodeSigning.UsbTokenProfile.Password">
            <summary>
            Returns the certificate password.
            </summary>
        </member>
        <member name="T:Neon.Deployment.DeploymentException">
            <summary>
            Thrown for deployement related problems.
            </summary>
        </member>
        <member name="M:Neon.Deployment.DeploymentException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">Optionally specifies an inner exception.</param>
        </member>
        <member name="T:Neon.Deployment.GitHubActionsApi">
            <summary>
            Implements GitHub Actions operations.
            </summary>
        </member>
        <member name="T:Neon.Deployment.GitHubActionsApi.RunInfo">
            <summary>
            Holds important state from a workflow run.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHubActionsApi.RunInfo.Id">
            <summary>
            The run ID.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHubActionsApi.RunInfo.Name">
            <summary>
            The workflow name.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHubActionsApi.RunInfo.Status">
            <summary>
            The status.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHubActionsApi.RunInfo.UpdatedAtUtc">
            <summary>
            The time (UTC) when the run was last updated.
            </summary>
        </member>
        <member name="M:Neon.Deployment.GitHubActionsApi.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="M:Neon.Deployment.GitHubActionsApi.DeleteRuns(System.String,System.String,System.TimeSpan)">
            <summary>
            <para>
            Deletes workflow runs from a GitHub repo.
            </para>
            <note>
            Only completed runs will be deleted.
            </note>
            </summary>
            <param name="repo">Identifies the target repository.</param>
            <param name="workflowName">
            Optionally specifies the workflow whose runs are to be deleted otherwise
            runs from all workflows in the repo will be deleted.
            </param>
            <param name="maxAge">
            Optionally specifies the age at which workflow runs are to be deleted.  
            This defaults to deleting all runs.
            </param>
            <returns>The number of runs deleted.</returns>
        </member>
        <member name="M:Neon.Deployment.GitHubActionsApi.DeleteRunsAsync(System.String,System.String,System.TimeSpan)">
            <summary>
            <para>
            Deletes workflow runs from a GitHub repo.
            </para>
            <note>
            Only completed runs will be deleted.
            </note>
            </summary>
            <param name="repo">Identifies the target repository.</param>
            <param name="workflowName">
            Optionally specifies the workflow whose runs are to be deleted otherwise
            runs from all workflows in the repo will be deleted.
            </param>
            <param name="maxAge">
            Optionally specifies the maximum age for retained workflow runs.  This
            defaults to <see cref="F:System.TimeSpan.Zero"/> which deletes all runs.
            </param>
            <returns>The number of runs deleted.</returns>
        </member>
        <member name="T:Neon.Deployment.GitHub">
            <summary>
            Implements common GitHub operations via the GitHub REST API.
            </summary>
            <remarks>
            <para>
            To use this class, first call <see cref="M:Neon.Deployment.GitHub.GetCredentials"/> to load the necessary
            credentials from 1Password and the call the desired APIs.  When you're done, it's
            a good practice to call <see cref="M:Neon.Deployment.GitHub.ClearCredentials"/>.
            </para>
            <note>
            This class currently requires that the <b>GITHUB_PAT</b> environment variable or
            <b>GITHUB[accesstoken]</b> secret be available via 1Password for the current user.
            </note>
            </remarks>
        </member>
        <member name="F:Neon.Deployment.GitHub.UserAgent">
            <summary>
            Specifies the <b>User-Agent</b> string used when submitting REST API
            requests to GitHub.  This defaults to <b>neon-sdk</b> but may be 
            customized.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHub.AccessToken">
            <summary>
            Returns the GitHub PAT (personal access token) or <c>null</c>.
            </summary>
        </member>
        <member name="M:Neon.Deployment.GitHub.GetCredentials">
            <summary>
            Retrieves the necessary credentials from 1Password when necessary and 
            caches them locally as well as in environment variables.
            </summary>
        </member>
        <member name="M:Neon.Deployment.GitHub.ClearCredentials">
            <summary>
            Clears any cached credentials.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHub.Packages">
            <summary>
            Returns the API class for managing GitHub packages.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHub.Actions">
            <summary>
            Returns the API class for managing GitHub Actions.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHub.Releases">
            <summary>
            Returns the API class for managing GitHub releases.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHub.Tags">
            <summary>
            Returns the API class for managing GutHub tags.
            </summary>
        </member>
        <member name="M:Neon.Deployment.GitHub.CreateClient(System.String)">
            <summary>
            Creates a REST client that can be used to manage GitHub.
            </summary>
            <param name="userAgent">Optionally identifies the user agent.  This defaults to <b>"neon-sdk"</b>.</param>
            <returns>The <see cref="T:Octokit.GitHubClient"/> instance.</returns>
        </member>
        <member name="M:Neon.Deployment.GitHub.CreateJsonClient(System.String)">
            <summary>
            Creates a <see cref="T:Neon.Net.JsonClient"/> that can be used to manage GitHub via
            its REST API.
            </summary>
            <param name="userAgent">Optionally identifies the user agent.  This defaults to <b>"neon-sdk"</b>.</param>
            <returns>The <see cref="T:Neon.Net.JsonClient"/> instance.</returns>
        </member>
        <member name="T:Neon.Deployment.GitHubExtensions">
            <summary>
            Internal GitHub API related extension methods.
            </summary>
        </member>
        <member name="M:Neon.Deployment.GitHubExtensions.GetPaginatedAsync(Neon.Net.JsonClient,System.String,System.Int32)">
            <summary>
            Executes a GET request on client, handling GitHub REST API pagination by collecting all of the
            <c>dynamic</c> result item values into the list returned.
            </summary>
            <param name="client">A <see cref="T:Neon.Net.JsonClient"/> returned by <see cref="M:Neon.Deployment.GitHub.CreateJsonClient(System.String)"/>.</param>
            <param name="uri">The relative request URI.</param>
            <param name="maxItemsPerPage">Optionally overrides the default maximum items per page to be returned by GitHub.  This defaults to 100.</param>
            <returns>The list of items returned by the request.</returns>
        </member>
        <member name="T:Neon.Deployment.GitHubRepoPath">
            <summary>
            Abstracts GitHub repo paths like: <b>github.com/owner/repo</b> or <b>github.com/owner/repo</b>,
            where <b>github.com</b> is the implied server.
            </summary>
        </member>
        <member name="M:Neon.Deployment.GitHubRepoPath.Parse(System.String)">
            <summary>
            Parses a GitHub repository path.
            </summary>
            <param name="path">The path, like: <b>[SERVER/]OWNER/REPO</b></param>
            <returns>The parsed <see cref="T:Neon.Deployment.GitHubRepoPath"/>.</returns>
            <exception cref="T:System.FormatException">Thrown when the input is invalid.</exception>
            <remarks>
            <note>
            <b>github.com</b> will be assumed when no server is specified.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Deployment.GitHubRepoPath.#ctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHubRepoPath.Server">
            <summary>
            Returns the <b>server</b> part of the path.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHubRepoPath.Owner">
            <summary>
            Returns the <b>owner</b> part of the path.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHubRepoPath.Repo">
            <summary>
            Returns the <b>repo</b> part of the path.
            </summary>
        </member>
        <member name="M:Neon.Deployment.GitHubRepoPath.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Deployment.GitHubPackage">
            <summary>
            Describes a GitHub package.
            </summary>
        </member>
        <member name="M:Neon.Deployment.GitHubPackage.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHubPackage.Name">
            <summary>
            Specifies the package name.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHubPackage.Type">
            <summary>
            Specifies the package type (one of the <see cref="T:Neon.Deployment.GitHubPackageType"/> values.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHubPackage.Visibility">
            <summary>
            Specifies the package visibility.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHubPackage.Versions">
            <summary>
            Specifies the known versions for the package.
            </summary>
        </member>
        <member name="T:Neon.Deployment.GitHubPackageApi">
            <summary>
            Implements GitHub Packages operations.
            </summary>
        </member>
        <member name="M:Neon.Deployment.GitHubPackageApi.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Neon.Deployment.GitHubPackageApi.List(System.String,System.String,Neon.Deployment.GitHubPackageType,Neon.Deployment.GitHubPackageVisibility)">
            <summary>
            Lists the packages for an organization.
            </summary>
            <param name="organization">The GitHub organization name.</param>
            <param name="nameOrPattern">The matching pattern (see <see cref="M:Neon.Common.NeonHelper.FileWildcardRegex(System.String)"/>).</param>
            <param name="packageType">Optionally specifies the package type.  This defaults to <see cref="F:Neon.Deployment.GitHubPackageType.Container"/>.</param>
            <param name="visibility">Optionally specifies the visibility of the package.  This defaults to <see cref="F:Neon.Deployment.GitHubPackageVisibility.All"/></param>
            <returns>The list of package information as a list of <see cref="T:Neon.Deployment.GitHubPackage"/> instance.</returns>
        </member>
        <member name="M:Neon.Deployment.GitHubPackageApi.ListAsync(System.String,System.String,Neon.Deployment.GitHubPackageType,Neon.Deployment.GitHubPackageVisibility,System.Boolean)">
            <summary>
            Lists the packages for an organization.
            </summary>
            <param name="organization">The GitHub organization name.</param>
            <param name="nameOrPattern">The matching pattern (see <see cref="M:Neon.Common.NeonHelper.FileWildcardRegex(System.String)"/>).</param>
            <param name="packageType">Optionally specifies the package type.  This defaults to <see cref="F:Neon.Deployment.GitHubPackageType.Container"/>.</param>
            <param name="visibility">Optionally specifies the visibility of the package.  This defaults to <see cref="F:Neon.Deployment.GitHubPackageVisibility.All"/></param>
            <param name="includeVersions">Optionally queries for the package versions as well.  This defaults to <c>false</c>.</param>
            <returns>The list of package information as a list of <see cref="T:Neon.Deployment.GitHubPackage"/> instance.</returns>
        </member>
        <member name="M:Neon.Deployment.GitHubPackageApi.Delete(System.String,System.String,Neon.Deployment.GitHubPackageType)">
            <summary>
            Deletes a specific named package or the packages that match a file pattern using
            <b>"*"</b> and <b>"?"</b> wildcards (see <see cref="M:Neon.Common.NeonHelper.FileWildcardRegex(System.String)"/>).
            </summary>
            <param name="organization">The GitHub organization name.</param>
            <param name="nameOrPattern">The package name or matching pattern (see <see cref="M:Neon.Common.NeonHelper.FileWildcardRegex(System.String)"/>).</param>
            <param name="packageType">Optionally specifies the package type.  This defaults to <see cref="F:Neon.Deployment.GitHubPackageType.Container"/>.</param>
        </member>
        <member name="M:Neon.Deployment.GitHubPackageApi.DeleteAsync(System.String,System.String,Neon.Deployment.GitHubPackageType)">
            <summary>
            Deletes a specific named package or the packages that match a file pattern using
            <b>"*"</b> and <b>"?"</b> wildcards (see <see cref="M:Neon.Common.NeonHelper.FileWildcardRegex(System.String)"/>).
            </summary>
            <param name="organization">The GitHub organization name.</param>
            <param name="nameOrPattern">The package name or matching pattern (see <see cref="M:Neon.Common.NeonHelper.FileWildcardRegex(System.String)"/>).</param>
            <param name="packageType">Optionally specifies the package type.  This defaults to <see cref="F:Neon.Deployment.GitHubPackageType.Container"/>.</param>
        </member>
        <member name="M:Neon.Deployment.GitHubPackageApi.SetVisibility(System.String,System.String,Neon.Deployment.GitHubPackageType,Neon.Deployment.GitHubPackageVisibility)">
            <summary>
            <para>
            Makes public a specific named package or the packages that match a file pattern using
            <b>"*"</b> and <b>"?"</b> wildcards (see <see cref="M:Neon.Common.NeonHelper.FileWildcardRegex(System.String)"/>).
            </para>
            <note>
            This is not currently implemented due to the lack of a proper GitHub REST API.
            </note>
            </summary>
            <param name="organization">The GitHub organization name.</param>
            <param name="nameOrPattern">The package name or matching pattern.</param>
            <param name="packageType">Optionally specifies the package type.  This defaults to <see cref="F:Neon.Deployment.GitHubPackageType.Container"/>.</param>
            <param name="visibility">The new package visibility.</param>
            <exception cref="T:System.NotImplementedException">Currently thrown always.</exception>
        </member>
        <member name="M:Neon.Deployment.GitHubPackageApi.SetVisibilityAsync(System.String,System.String,Neon.Deployment.GitHubPackageType,Neon.Deployment.GitHubPackageVisibility)">
            <summary>
            <para>
            Makes public a specific named package or the packages that match a file pattern using
            <b>"*"</b> and <b>"?"</b> wildcards (see <see cref="M:Neon.Common.NeonHelper.FileWildcardRegex(System.String)"/>).
            </para>
            <note>
            This is not currently implemented due to the lack of a proper GitHub REST API.
            </note>
            </summary>
            <param name="organization">The GitHub organization name.</param>
            <param name="nameOrPattern">The package name or matching pattern.</param>
            <param name="visibility">The visibility to set the package to.</param>
            <param name="packageType">Optionally specifies the package type.  This defaults to <see cref="F:Neon.Deployment.GitHubPackageType.Container"/>.</param>
            <exception cref="T:System.NotImplementedException">Currently thrown always.</exception>
        </member>
        <member name="T:Neon.Deployment.GitHubPackageType">
            <summary>
            Enumerates the supported GitHub package types.
            </summary>
        </member>
        <member name="F:Neon.Deployment.GitHubPackageType.Npm">
            <summary>
            NPM package.
            </summary>
        </member>
        <member name="F:Neon.Deployment.GitHubPackageType.Maven">
            <summary>
            Maven package.
            </summary>
        </member>
        <member name="F:Neon.Deployment.GitHubPackageType.RubyGems">
            <summary>
            Ruby Gem.
            </summary>
        </member>
        <member name="F:Neon.Deployment.GitHubPackageType.Nuget">
            <summary>
            Nuget package.
            </summary>
        </member>
        <member name="F:Neon.Deployment.GitHubPackageType.Docker">
            <summary>
            Docker package (use <see cref="F:Neon.Deployment.GitHubPackageType.Container"/> for packages with namespace <b>https://ghcr.io/owner/package-name</b>).
            </summary>
        </member>
        <member name="F:Neon.Deployment.GitHubPackageType.Container">
            <summary>
            Container image.
            </summary>
        </member>
        <member name="T:Neon.Deployment.GitHubPackageVersion">
            <summary>
            Describes a package version.
            </summary>
        </member>
        <member name="M:Neon.Deployment.GitHubPackageVersion.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHubPackageVersion.Id">
            <summary>
            The package version ID.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHubPackageVersion.Name">
            <summary>
            The package version name.  This will be the SHA256 for container images.
            </summary>
        </member>
        <member name="P:Neon.Deployment.GitHubPackageVersion.Tags">
            <summary>
            The assigned tags for container images.
            </summary>
        </member>
        <member name="T:Neon.Deployment.GitHubPackageVisibility">
            <summary>
            Enumerates the supported GitHub package visibility types.
            </summary>
        </member>
        <member name="F:Neon.Deployment.GitHubPackageVisibility.All">
            <summary>
            All packages.
            </summary>
        </member>
        <member name="F:Neon.Deployment.GitHubPackageVisibility.Public">
            <summary>
            Public packages.
            </summary>
        </member>
        <member name="F:Neon.Deployment.GitHubPackageVisibility.Private">
            <summary>
            Private packages.
            </summary>
        </member>
        <member name="F:Neon.Deployment.GitHubPackageVisibility.Internal">
            <summary>
            Internal packages.
            </summary>
        </member>
        <member name="T:Neon.Deployment.GitHubReleaseApi">
            <summary>
            Used to publish and manage GitHub releases.
            </summary>
            <remarks>
            <note>
            This API doesn't currently support modifying assets of
            of published releases although GitHub does support this.
            We may add this functionality in the future.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Deployment.GitHubReleaseApi.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="M:Neon.Deployment.GitHubReleaseApi.Create(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates a GitHub release.
            </summary>
            <param name="repo">Identifies the target repo.</param>
            <param name="tagName">Specifies the tag to be referenced by the release.</param>
            <param name="releaseName">Optionally specifies the release name (defaults to <paramref name="tagName"/>).</param>
            <param name="body">Optionally specifies the markdown formatted release notes.</param>
            <param name="draft">Optionally indicates that the release won't be published immediately.</param>
            <param name="prerelease">Optionally indicates that the release is not production ready.</param>
            <param name="branch">Optionally identifies the branch to be tagged.  This defaults to <b>master</b> or <b>main</b> when either of those branches are already present.</param>
            <returns>The newly created <see cref="T:Octokit.Release"/>.</returns>
            <remarks>
            <para>
            If the <paramref name="tagName"/> doesn't already exist in the repo, this method will
            tag the latest commit on the specified <paramref name="branch"/> or else the defailt branch
            in the target repo and before creating the release.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Deployment.GitHubReleaseApi.Update(System.String,Octokit.Release,Octokit.ReleaseUpdate)">
            <summary>
            Updates a GitHub release.
            </summary>
            <param name="repo">Identifies the target repository.</param>
            <param name="release">Specifies the release being updated.</param>
            <param name="releaseUpdate">Specifies the revisions.</param>
            <returns>The updated release.</returns>
            <remarks>
            <para>
            To update a release, you'll first need to:
            </para>
            <list type="number">
            <item>
            Obtain a <see cref="T:Octokit.Release"/> referencing the target release returned from 
            <see cref="M:Neon.Deployment.GitHubReleaseApi.Create(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)"/>
            or by listing or getting releases.
            </item>
            <item>
            Obtain a <see cref="T:Octokit.ReleaseUpdate"/> by calling <see cref="M:Octokit.Release.ToUpdate"/>.
            </item>
            <item>
            Make your changes to the release update.
            </item>
            <item>
            Call <see cref="M:Neon.Deployment.GitHubReleaseApi.Update(System.String,Octokit.Release,Octokit.ReleaseUpdate)"/>, passing the 
            original release along with the update.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Neon.Deployment.GitHubReleaseApi.List(System.String)">
            <summary>
            List the releases for a GitHub repo.
            </summary>
            <returns>The list of releases.</returns>
        </member>
        <member name="M:Neon.Deployment.GitHubReleaseApi.Get(System.String,System.String)">
            <summary>
            Retrieves a specific GitHub release.
            </summary>
            <param name="repo">Identifies the target repository.</param>
            <param name="tagName">Specifies the tag for the target release.</param>
            <returns>The release information or <c>null</c> when the requested release doesn't exist.</returns>
        </member>
        <member name="M:Neon.Deployment.GitHubReleaseApi.Find(System.String,System.Func{Octokit.Release,System.Boolean})">
            <summary>
            Returns the releases that satisfies a predicate.
            </summary>
            <param name="repo">Identifies the target repository.</param>
            <param name="predicate">The predicate.</param>
            <returns>The list of matching releases.</returns>
        </member>
        <member name="M:Neon.Deployment.GitHubReleaseApi.UploadAsset(System.String,Octokit.Release,System.String,System.String,System.String)">
            <summary>
            Uploads an asset file to a GitHub release.  Any existing asset with same name will be replaced.
            </summary>
            <param name="repo">Identifies the target repository.</param>
            <param name="release">The target release.</param>
            <param name="assetPath">Path to the source asset file.</param>
            <param name="assetName">Optionally specifies the file name to assign to the asset.  This defaults to the file name in <paramref name="assetPath"/>.</param>
            <param name="contentType">Optionally specifies the asset's <b>Content-Type</b>.  This defaults to: <b> application/octet-stream</b></param>
            <returns>The new <see cref="T:Octokit.ReleaseAsset"/>.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the releas has already been published.</exception>
            <remarks>
            <note>
            The current implementation only works for unpublished releases where <c>Draft=true</c>.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Deployment.GitHubReleaseApi.UploadAsset(System.String,Octokit.Release,System.IO.Stream,System.String,System.String)">
            <summary>
            Uploads an asset stream to a GitHub release.  Any existing asset with same name will be replaced.
            </summary>
            <param name="repo">Identifies the target repository.</param>
            <param name="release">The target release.</param>
            <param name="assetStream">The asset source stream.</param>
            <param name="assetName">Specifies the file name to assign to the asset.</param>
            <param name="contentType">Optionally specifies the asset's <b>Content-Type</b>.  This defaults to: <b> application/octet-stream</b></param>
            <returns>The new <see cref="T:Octokit.ReleaseAsset"/>.</returns>
        </member>
        <member name="M:Neon.Deployment.GitHubReleaseApi.GetAssetUri(Octokit.Release,Octokit.ReleaseAsset)">
            <summary>
            <para>
            Returns the URI that can be used to download a GitHub release asset.
            </para>
            <note>
            This works only for published releases.
            </note>
            </summary>
            <param name="release">The target release.</param>
            <param name="asset">The target asset.</param>
            <returns>The asset URI.</returns>
        </member>
        <member name="M:Neon.Deployment.GitHubReleaseApi.Remove(System.String,Octokit.Release)">
            <summary>
            Deletes a GitHub release.
            </summary>
            <param name="repo">Identifies the target repository.</param>
            <param name="release">The target release.</param>
            <remarks>
            <note>
            This fails silently if the release doesn't exist.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Deployment.GitHubReleaseApi.UploadMultipartAsset(System.String,Octokit.Release,System.String,System.String,System.String,System.String,System.Boolean,System.Int64)">
            <summary>
            Uploads a multi-part download to a release and then publishes the release.
            </summary>
            <param name="repo">Identifies the target repository.</param>
            <param name="release">The target release.</param>
            <param name="sourcePath">Path to the file being uploaded.</param>
            <param name="version">The download version.</param>
            <param name="name">Optionally overrides the download file name specified by <paramref name="sourcePath"/> to initialize <see cref="P:Neon.Deployment.DownloadManifest.Name"/>.</param>
            <param name="filename">Optionally overrides the download file name specified by <paramref name="sourcePath"/> to initialize <see cref="P:Neon.Deployment.DownloadManifest.Filename"/>.</param>
            <param name="noMd5File">
            This method creates a file named [<paramref name="sourcePath"/>.md5] with the MD5 hash for the entire
            uploaded file by default.  You may override this behavior by passing <paramref name="noMd5File"/>=<c>true</c>.
            </param>
            <param name="maxPartSize">Optionally overrides the maximum part size (defaults to 75 MiB).</param>d
            <returns>The <see cref="T:Neon.Deployment.DownloadManifest"/>.</returns>
            <remarks>
            <para>
            The release passed must be unpublished and you may upload other assets before calling this.
            </para>
            <note>
            Take care that any assets already published have names that won't conflict with the asset
            part names, which will be formatted like: <b>part-##</b>
            </note>
            <note>
            Unlike the S3 implementation, this method uploads the parts to GitHub on a single thread.
            </note>
            </remarks>
        </member>
        <member name="T:Neon.Deployment.GitHubTagApi">
            <summary>
            Used to manage GitHub repo tags.
            </summary>
        </member>
        <member name="M:Neon.Deployment.GitHubTagApi.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="M:Neon.Deployment.GitHubTagApi.List(System.String)">
            <summary>
            Lists the current tags for a GitHub repo.
            </summary>
            <param name="repo">Identifies the target repo.</param>
            <returns>The list of <see cref="T:Octokit.RepositoryTag"/> instances.</returns>
        </member>
        <member name="T:Neon.Deployment.DeploymentHelper">
            <summary>
            Deployment related defintions and utilities.
            </summary>
        </member>
        <member name="F:Neon.Deployment.DeploymentHelper.NeonProfileServicePipe">
            <summary>
            Identifies the named pipe used to communicate with the Neon profile
            service running on the local workstation to query for user profile
            information as well as secrets.
            </summary>
        </member>
        <member name="F:Neon.Deployment.DeploymentHelper.DownloadManifestContentType">
            <summary>
            The HTTP Content-Type used for multi-part download manifest.
            </summary>
        </member>
        <member name="M:Neon.Deployment.DeploymentHelper.ClearPowershellHistory">
            <summary>
            Clears the Powershell command history.  It's possible that scripts and
            GitHub workflow runs may leave sensitive information in the command
            history which could become a security vunerability.
            </summary>
        </member>
        <member name="M:Neon.Deployment.DeploymentHelper.DownloadMultiPart(Neon.Deployment.DownloadManifest,System.String,Neon.Deployment.DownloadProgressDelegate,Neon.Retry.IRetryPolicy,System.TimeSpan,System.Boolean)">
            <summary>
            Synchronously downloads and assembles a multi-part file as specified by a <see cref="T:Neon.Deployment.DownloadManifest"/>.
            </summary>
            <param name="download">The download details.</param>
            <param name="targetPath">The target file path.</param>
            <param name="progressAction">Optionally specifies an action to be called with the the percentage downloaded.</param>
            <param name="retry">Optionally specifies the retry policy.  This defaults to a reasonable policy.</param>
            <param name="partTimeout">Optionally specifies the HTTP download timeout for each part (defaults to 10 minutes).</param>
            <param name="strictCheck">
            <para>
            Optionally used to enable a slow but more comprehensive check of any existing file.
            When this is enabled and the download file already exists along with its MD5 hash file,
            the method will assume that the existing file matches when the file size is the same
            as specified in the manifest and manifest overall MD5 matches the local MD5 file.
            </para>
            <para>
            Otherwise, this method will need to compute the MD5 hashes for the existing file parts
            and compare those to the part MD5 hashes in the manifest, which can take quite a while
            for large files.
            </para>
            <para>
            This defaults to <c>false</c>.
            </para>
            </param>
            <exception cref="T:System.IO.IOException">Thrown when the download is corrupt.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown for network errors.</exception>
            <exception cref="T:Neon.Net.HttpException">Thrown for HTTP network errors.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation was cancelled.</exception>
        </member>
        <member name="M:Neon.Deployment.DeploymentHelper.DownloadMultiPart(System.String,System.String,Neon.Deployment.DownloadProgressDelegate,Neon.Retry.IRetryPolicy,System.TimeSpan,System.Boolean)">
            <summary>
            Asynchronously downloads and assembles a multi-part file as specified by a source URI.
            </summary>
            <param name="uri">The URI for the source URI holding the <see cref="T:Neon.Deployment.DownloadManifest"/> details as JSON.</param>
            <param name="targetPath">The target file path.</param>
            <param name="progressAction">Optionally specifies an action to be called with the the percentage downloaded.</param>
            <param name="retry">Optionally specifies the retry policy.  This defaults to a reasonable policy.</param>
            <param name="partTimeout">Optionally specifies the HTTP download timeout for each part (defaults to 10 minutes).</param>
            <param name="strictCheck">
            <para>
            Optionally used to enable a slow but more comprehensive check of any existing file.
            When this is enabled and the download file already exists along with its MD5 hash file,
            the method will assume that the existing file matches when the file size is the same
            as specified in the manifest and manifest overall MD5 matches the local MD5 file.
            </para>
            <para>
            Otherwise, this method will need to compute the MD5 hashes for the existing file parts
            and compare those to the part MD5 hashes in the manifest, which can take quite a while
            for large files.
            </para>
            <para>
            This defaults to <c>false</c>.
            </para>
            </param>
            <exception cref="T:System.IO.IOException">Thrown when the download is corrupt.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown for network errors.</exception>
            <exception cref="T:Neon.Net.HttpException">Thrown for HTTP network errors.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation was cancelled.</exception>
            <exception cref="T:System.FormatException">Thrown when the object retrieved from <paramref name="uri"/> doesn't have the <see cref="F:Neon.Deployment.DeploymentHelper.DownloadManifestContentType"/> content type.</exception>
        </member>
        <member name="M:Neon.Deployment.DeploymentHelper.DownloadMultiPartAsync(Neon.Deployment.DownloadManifest,System.String,Neon.Deployment.DownloadProgressDelegate,System.TimeSpan,Neon.Retry.IRetryPolicy,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously downloads and assembles a multi-part file  as specified by a <see cref="T:Neon.Deployment.DownloadManifest"/>.
            </summary>
            <param name="manifest">The download details.</param>
            <param name="targetPath">The target file path.</param>
            <param name="progressAction">Optionally specifies an action to be called with the the percentage downloaded.</param>
            <param name="partTimeout">Optionally specifies the HTTP download timeout for each part (defaults to 10 minutes).</param>
            <param name="retry">Optionally specifies the retry policy.  This defaults to a reasonable policy.</param>
            <param name="strictCheck">
            <para>
            Optionally used to disable a slow but more comprehensive check of any existing file.
            When this is disabled and the download file already exists along with its MD5 hash file,
            the method will assume that the existing file matches when the file size is the same
            as specified in the manifest and manifest overall MD5 matches the local MD5 file.
            </para>
            <para>
            Otherwise when <paramref name="strictCheck"/> is <c>true</c>, this method will need to 
            compute the MD5 hashes for the existing file parts and compare those to the part MD5
            hashes in the manifest, which can take quite a while for large files.
            </para>
            <para>
            This defaults to <c>true</c>.
            </para>
            </param>
            <param name="cancellationToken">Optionally specifies the operation cancellation token.</param>
            <returns>The path to the downloaded file.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the download is corrupt.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown for network errors.</exception>
            <exception cref="T:Neon.Net.HttpException">Thrown for HTTP network errors.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation was cancelled.</exception>
            <remarks>
            <para>
            This method downloads the file specified by <paramref name="manifest"/> to the folder specified, creating 
            the folder first when required.  The file will be downloaded in parts, where each part will be validated
            by comparing the part's MD5 hash (when present) with the computed value.  The output file will be named 
            <see cref="P:Neon.Deployment.DownloadManifest.Name"/> and the overall MD5 hash will also be saved using the same file name but
            <b>adding</b> the <b>.md5</b> extension.
            </para>
            <para>
            This method will continue downloading a partially downloaded file.  This works by validating the already
            downloaded parts against their MD5 hashes and then continuing part downloads after the last valid part.
            Nothing will be downloaded when the existing file is fully formed.
            </para>
            <note>
            The target files (download and MD5) will be deleted when download appears to be corrupt.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Deployment.DeploymentHelper.DownloadMultiPartAsync(System.String,System.String,Neon.Deployment.DownloadProgressDelegate,System.TimeSpan,Neon.Retry.IRetryPolicy,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously downloads and assembles a multi-part file  as specified by a <see cref="T:Neon.Deployment.DownloadManifest"/>.
            </summary>
            <param name="uri">The URI for the source URI holding the <see cref="T:Neon.Deployment.DownloadManifest"/> details as JSON.</param>
            <param name="targetPath">The target file path.</param>
            <param name="progressAction">Optionally specifies an action to be called with the the percentage downloaded.</param>
            <param name="partTimeout">Optionally specifies the HTTP download timeout for each part (defaults to 10 minutes).</param>
            <param name="retry">Optionally specifies the retry policy.  This defaults to a reasonable policy.</param>
            <param name="strictCheck">
            <para>
            Optionally used to enable a slow but more comprehensive check of any existing file.
            When this is enabled and the download file already exists along with its MD5 hash file,
            the method will assume that the existing file matches when the file size is the same
            as specified in the manifest and manifest overall MD5 matches the local MD5 file.
            </para>
            <para>
            Otherwise, this method will need to compute the MD5 hashes for the existing file parts
            and compare those to the part MD5 hashes in the manifest, which can take quite a while
            for large files.
            </para>
            <para>
            This defaults to <c>false</c>.
            </para>
            </param>
            <param name="cancellationToken">Optionally specifies the operation cancellation token.</param>
            <returns>The path to the downloaded file.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the download is corrupt.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown for network errors.</exception>
            <exception cref="T:Neon.Net.HttpException">Thrown for HTTP network errors.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown when the operation was cancelled.</exception>
            <exception cref="T:System.FormatException">Thrown when the object retrieved from <paramref name="uri"/> doesn't have the <see cref="F:Neon.Deployment.DeploymentHelper.DownloadManifestContentType"/> content type.</exception>
            <remarks>
            <para>
            This method downloads the file specified by <paramref name="uri"/> to the folder specified, creating 
            the folder first when required.  The file will be downloaded in parts, where each part will be validated
            by comparing the part's MD5 hash (when present) with the computed value.  The output file will be named 
            <see cref="P:Neon.Deployment.DownloadManifest.Name"/> and the overall MD5 hash will also be saved using the same file name but
            <b>adding</b> the <b>.md5</b> extension.
            </para>
            <para>
            This method will continue downloading a partially downloaded file.  This works by validating the already
            downloaded parts against their MD5 hashes and then continuing part downloads after the last valid part.
            Nothing will be downloaded when the existing file is fully formed.
            </para>
            <note>
            The target files (download and MD5) will be deleted when download appears to be corrupt.
            </note>
            </remarks>
        </member>
        <member name="T:Neon.Deployment.NamespaceDoc">
            <summary>
            <para>
            The <b>Neon.Deployment</b> library includes utility classes for managing deployments
            for CI/CD.
            </para>
            <note>
            These classes are not entirely general purpose at this point.  NEONFORGE maintainers are
            currently using this for CI/CD for opensource and private NEONFORGE related projects.
            We may make these more generic in the future.
            </note>
            </summary>
        </member>
        <member name="T:Neon.Deployment.NotifyClient">
            <summary>
            <para>
            Implements notification operations like sending an email or a Microsoft Teams message.
            </para>
            <note>
            These notifications will be sent from the <b>devbot@neonforge.com</b> user because
            that user doesn't enable multi-factor authentication (MFA) whereas our developer
            Office accounts do enable MFA.  MFA prevents basic authentication from working.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Deployment.NotifyClient.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="username">Optionally specifies the Office 365 username (like: "sally@neonforge.com").</param>
            <param name="password">Optionally specifies the password.</param>
            <remarks>
            This constructor obtains these values from <b>neon-assistant</b> from the 
            <b>devbot@neonforge.com</b> user's <b>NEONFORGE_LOGIN</b> secret when not 
            specified explicitly.
            </remarks>
        </member>
        <member name="M:Neon.Deployment.NotifyClient.SendMail(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sends an email via the <b>devbot@neonforge.com</b> Office 356 account.
            </summary>
            <param name="to">Specifies the target email addresses separated with commas.</param>
            <param name="subject">Specifies the subject line.</param>
            <param name="body">Optionally specifies the message body text.</param>
            <param name="bodyAsHtml">Optionally indicates that the body text is HTML.</param>
            <param name="cc">Optionally specifies the target CC (carbon copy) addresses separated with commas.</param>
            <param name="bcc">Optionally specifies the target BCC (blind carbon copy) addresses separated with commas.</param>
            <param name="attachmentPaths">Specifies the file paths to any attachments to be included.</param>
        </member>
        <member name="M:Neon.Deployment.NotifyClient.SendTeamsMessage(System.String,System.String)">
            <summary>
            Sends a message to a Office 365 Teams channel.
            </summary>
            <param name="channelUri">Specifies the target Teams channel URI.</param>
            <param name="cardJson">
            <para>
            Specifies the message as the legancy <b>MessageCard format:</b>
            </para>
            <para>
            https://learn.microsoft.com/en-us/outlook/actionable-messages/message-card-reference<br/>
            https://messagecardplayground.azurewebsites.net/
            </para>
            <note>
            Adaptive Cards are not supported by the Teams Connector at this time.
            </note>
            </param>
        </member>
        <member name="T:Neon.Deployment.OnePassword">
            <summary>
            Wraps the 1Password CLI.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Neon.Deployment.OnePassword.OnePasswordStatus">
            <summary>
            Unfortunately, the 1Password CLI doesn't appear to return specific
            exit codes detailing the for specific error yet.  We're going to 
            hack this by examining the response text.
            </summary>
        </member>
        <member name="F:Neon.Deployment.OnePassword.OnePasswordStatus.OK">
            <summary>
            The operation was successful.
            </summary>
        </member>
        <member name="F:Neon.Deployment.OnePassword.OnePasswordStatus.SessionExpired">
            <summary>
            The session token has expired.
            </summary>
        </member>
        <member name="F:Neon.Deployment.OnePassword.OnePasswordStatus.Other">
            <summary>
            Unspecified error.
            </summary>
        </member>
        <member name="M:Neon.Deployment.OnePassword.CheckInstallation(System.String)">
            <summary>
            This class requires that a <b>op.exe</b> v2 client be installed and if
            the 1Password app is installed that it be version 8.0 or greater.
            </summary>
            <param name="cliPath">
            Optionally specifies the fully qualified path to the 1Password CLI which
            should be executed instead of the CLI found on the PATH.
            </param>
            <exception cref="T:System.NotSupportedException">Thrown when any of the checks failed.</exception>
        </member>
        <member name="P:Neon.Deployment.OnePassword.CliConfigRequired">
            <summary>
            <para>
            Returns <c>true</c> if the 1Password CLI needs to be configured by
            setting the <b>OP_DEVICE</b> environment variable.
            </para>
            <note>
            The CLI requires <b>OP_DEVICE</b> to be set when the 1Password application
            is not installed on the current machine.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Deployment.OnePassword.Clear">
            <summary>
            Clears fields to indicate the underlying secret manager is signed-out.
            </summary>
        </member>
        <member name="M:Neon.Deployment.OnePassword.Signin(System.String,System.String,System.String)">
            <summary>
            Signs into 1Password using just the account, master password, and default vault.
            </summary>
            <param name="account">The account's shorthand name (e.g. (e.g. "sally@neonforge.com").</param>
            <param name="defaultVault">The default vault.</param>
            <param name="cliPath">
            Optionally specifies the fully qualified path to the 1Password CLI which
            should be executed instead of the CLI found on the PATH.
            </param>
            <exception cref="T:Neon.Deployment.OnePasswordException">Thrown when signin fails.</exception>
            <returns>
            The time (UTC) when the session will be expire if not extended.
            </returns>
        </member>
        <member name="M:Neon.Deployment.OnePassword.Signout(System.String)">
            <summary>
            Signs out.
            </summary>
        </member>
        <member name="M:Neon.Deployment.OnePassword.IsSignedin(System.String)">
            <summary>
            Checks the 1Password CLI sign-in/connection status via the <b>whoami</b> command.
            </summary>
            <param name="cliPath">
            Optionally specifies the fully qualified path to the 1Password CLI which
            should be executed instead of the CLI found on the PATH.
            </param>
            <returns><c>true</c> when the CLI is connected.</returns>
        </member>
        <member name="M:Neon.Deployment.OnePassword.GetSecretPassword(System.String,System.String,System.String)">
            <summary>
            Returns a named password from the current user's standard 1Password 
            vault like <b>user-sally</b> by default or a custom named vault.
            </summary>
            <param name="name">The password name with optional property.</param>
            <param name="vault">Optionally specifies a specific vault.</param>
            <param name="cliPath">
            Optionally specifies the fully qualified path to the 1Password CLI which
            should be executed instead of the CLI found on the PATH.
            </param>
            <returns>The requested password (from the password's [password] field).</returns>
            <exception cref="T:Neon.Deployment.OnePasswordException">Thrown when the requested secret or property doesn't exist or for other 1Password related problems.</exception>
            <remarks>
            <para>
            The <paramref name="name"/> parameter may optionally specify the desired
            1Password property to override the default <b>"password"</b> for this
            method.  Properties are specified like:
            </para>
            <example>
            SECRETNAME[PROPERTY]
            </example>
            </remarks>
        </member>
        <member name="M:Neon.Deployment.OnePassword.GetSecretValue(System.String,System.String,System.String)">
            <summary>
            Returns a named value from the current user's standard 1Password 
            vault like <b>user-sally</b> by default or a custom named vault.
            </summary>
            <param name="name">The password name with optional property.</param>
            <param name="vault">Optionally specifies a specific vault.</param>
            <param name="cliPath">
            Optionally specifies the fully qualified path to the 1Password CLI which
            should be executed instead of the CLI found on the PATH.
            </param>
            <returns>The requested value (from the password's <b>value</b> field).</returns>
            <exception cref="T:Neon.Deployment.OnePasswordException">Thrown when the requested secret or property doesn't exist or for other 1Password related problems.</exception>
            <remarks>
            <para>
            The <paramref name="name"/> parameter may optionally specify the desired
            1Password property to override the default <b>"value"</b> for this
            method.  Properties are specified like:
            </para>
            <example>
            SECRETNAME[PROPERTY]
            </example>
            </remarks>
        </member>
        <member name="M:Neon.Deployment.OnePassword.ExtendSession(System.String)">
            <summary>
            Attempts to extend the 1Password session by 30 minutes.
            </summary>
            <param name="cliPath">
            Optionally specifies the fully qualified path to the 1Password CLI which
            should be executed instead of the CLI found on the PATH.
            </param>
            <returns>
            The new session expiration time (UTC) or <c>null</c> when we're not signed
            into the underlying secret manager.
            </returns>
        </member>
        <member name="M:Neon.Deployment.OnePassword.GetStatus(Neon.Common.ExecuteResponse)">
            <summary>
            Returns a <see cref="T:Neon.Deployment.OnePassword.OnePasswordStatus"/> corresponding to a 1Password CLI response.
            </summary>
            <param name="response">The 1Password CLI response.</param>
            <returns>The status code.</returns>
        </member>
        <member name="T:Neon.Deployment.OnePasswordException">
            <summary>
            Thrown by the <see cref="T:Neon.Deployment.OnePassword"/> for errors.
            </summary>
        </member>
        <member name="M:Neon.Deployment.OnePasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies the exception message.</param>
            <param name="innerException">Optionally specifies an inner exception.</param>
        </member>
        <member name="T:Neon.Deployment.MaintainerProfile">
            <summary>
            Provides the <see cref="T:Neon.Deployment.IProfileClient"/> implementation used by NEONFORGE maintainers
            to obtain 1Password secrets via our internal <b>neon-assistant</b> tool.
            </summary>
        </member>
        <member name="M:Neon.Deployment.MaintainerProfile.GetAwsCredentials(System.String)">
            <summary>
            <para>
            Retrieves the AWS access key ID and secret access key from 1Password 
            and sets these enviroment variables for use by the AWS-CLI:
            </para>
            <list type="bullet">
            <item><c>AWS_ACCESS_KEY_ID</c></item>
            <item><c>AWS_SECRET_ACCESS_KEY</c></item>
            </list>
            </summary>
            <param name="secretName">Optionally specifies a custom name for the 1Password secret holding the credentials.</param>
            <remarks>
            <para>
            The AWS credentials are persisted to a 1Password secret for each maintainer, where each user should
            be granted individual credentials so they can be easy to revoke if necessary.  We use a single secret
            to hold these individual fields:
            </para>
            <list type="table">
            <item>
                <term><b>ACCESS_KEY_ID</b></term>
                <description>
                Identifies the AWS access key.
                </description>
            </item>
            <item>
                <term><b>SECRET_ACCESS_KEY</b></term>
                <description>
                The AWS access key secret.
                </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Neon.Deployment.MaintainerProfile.ClearAwsCredentials">
            <summary>
            <para>
            Removes the AWS-CLI credential environment variables if present:
            </para>
            <list type="bullet">
            <item><c>AWS_ACCESS_KEY_ID</c></item>
            <item><c>AWS_SECRET_ACCESS_KEY</c></item>
            </list>
            </summary>
        </member>
        <member name="F:Neon.Deployment.MaintainerProfile.EnvironmentCachePrefix">
            <summary>
            Variable name prefix used for caching secrets and profile values as environment variables.
            </summary>
        </member>
        <member name="F:Neon.Deployment.MaintainerProfile.ProfileEnvironmentCachePrefix">
            <summary>
            Variable name prefix used for caching profile values as environment variables.
            </summary>
        </member>
        <member name="F:Neon.Deployment.MaintainerProfile.SecretEnvironmentCachePrefix">
            <summary>
            Variable name prefix used for caching secret values as environment variables.
            </summary>
        </member>
        <member name="M:Neon.Deployment.MaintainerProfile.ClearEnvironmentCache">
            <summary>
            Clears any secrets or profile values cached as environment variables.
            </summary>
        </member>
        <member name="M:Neon.Deployment.MaintainerProfile.#ctor">
            <summary>
            <para>
            Constructs a profile client with default parameters.  This is suitable for 
            constructing from Powershell scripts.
            </para>
            <note>
            <see cref="T:Neon.Deployment.MaintainerProfile"/> currently only supports Windows.
            </note>
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when not running on Windows.</exception>
        </member>
        <member name="M:Neon.Deployment.MaintainerProfile.#ctor(System.String,System.TimeSpan)">
            <summary>
            <para>
            Constructor with optional client timeout.
            </para>
            <note>
            <see cref="T:Neon.Deployment.MaintainerProfile"/> currently supports only Windows.
            </note>
            </summary>
            <param name="pipeName">Specifies the server pipe name.</param>
            <param name="connectTimeout">Optionally specifies the connection timeout.  This defaults to <b>10 seconds</b>.</param>
            <exception cref="T:System.NotSupportedException">Thrown when not running on Windows.</exception>
        </member>
        <member name="M:Neon.Deployment.MaintainerProfile.Call(Neon.Deployment.IProfileRequest)">
            <summary>
            Submits a request to the profile server and returns the response.
            </summary>
            <param name="request">The request.</param>
            <returns>The response.</returns>
            <exception cref="T:Neon.Deployment.ProfileException">Thrown if the profile server returns an error.</exception>
        </member>
        <member name="M:Neon.Deployment.MaintainerProfile.EnsureAuthenticated(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Deployment.MaintainerProfile.Signout">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Deployment.MaintainerProfile.GetProfileValue(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Deployment.MaintainerProfile.GetSecretPassword(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Deployment.MaintainerProfile.GetSecretValue(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Deployment.MaintainerProfile.GetCommonSecrets">
            <summary>
            Proactively used to retrieve secrets commonly used for CI/CD operations so they'll
            be available even after <b>neon-assistant</b> has signed out some time later.  
            Currently, AWS and GitHub credentials are retrieved.
            </summary>
        </member>
        <member name="M:Neon.Deployment.MaintainerProfile.Call(System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Deployment.ProfileHandlerResult">
            <summary>
            Describes the results returned by <see cref="T:Neon.Deployment.ProfileServer"/> handlers.
            </summary>
        </member>
        <member name="M:Neon.Deployment.ProfileHandlerResult.Create(System.String)">
            <summary>
            Constructs a handler value result.
            </summary>
            <param name="value">The handler result.</param>
            <returns>The <see cref="T:Neon.Deployment.ProfileHandlerResult"/>.</returns>
        </member>
        <member name="M:Neon.Deployment.ProfileHandlerResult.CreateError(Neon.Deployment.ProfileRequest,System.String,System.String)">
            <summary>
            Constructs an error result.
            </summary>
            <param name="request">Specifies the profile request or <c>null</c> when this isn't relevant.</param>
            <param name="status">One of the <see cref="T:Neon.Deployment.ProfileStatus"/> codes.</param>
            <param name="message">The error message.</param>
            <returns>The <see cref="T:Neon.Deployment.ProfileHandlerResult"/>.</returns>
            <remarks>
            <note>
            This method will examine the <paramref name="message"/>, looking for
            underlying 1Password errors and will potentially override the
            <paramref name="status"/> passed.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Deployment.ProfileHandlerResult.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileHandlerResult.Value">
            <summary>
            Specifies the value returned by the handler.
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileHandlerResult.Error">
            <summary>
            Returns a human readable error message.
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileHandlerResult.Status">
            <summary>
            Specifies one of the <see cref="T:Neon.Deployment.ProfileStatus"/> values.  This defaults
            to <see cref="F:Neon.Deployment.ProfileStatus.OK"/>.
            </summary>
        </member>
        <member name="M:Neon.Deployment.ProfileHandlerResult.ToResponse">
            <summary>
            Convertes the handler response into a <see cref="T:Neon.Deployment.ProfileResponse"/>.
            </summary>
            <returns>The <see cref="T:Neon.Deployment.ProfileResponse"/>.</returns>
        </member>
        <member name="T:Neon.Deployment.ProfileRequest">
            <summary>
            Abstracts Neon Profile Service named pipe command requests.
            </summary>
        </member>
        <member name="M:Neon.Deployment.ProfileRequest.Create(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a command with optional arguments.
            </summary>
            <param name="command">
            <para>
            The command name.
            </para>
            <note>
            Argument names and values may not include commas.
            </note>
            </param>
            <param name="args">The optional arguments.</param>
            <returns>The <see cref="T:Neon.Deployment.ProfileRequest"/>.</returns>
        </member>
        <member name="M:Neon.Deployment.ProfileRequest.Parse(System.String)">
            <summary>
            Parses a request from a line of text read from the named pipe.
            </summary>
            <param name="commandLine">The command line.</param>
            <returns>The <see cref="T:Neon.Deployment.ProfileRequest"/>.</returns>
            <exception cref="T:System.FormatException">Thrown for invalid command lines.</exception>
        </member>
        <member name="M:Neon.Deployment.ProfileRequest.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileRequest.Command">
            <summary>
            Returns the command.
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileRequest.Args">
            <summary>
            Returns the standard command arguments.
            </summary>
        </member>
        <member name="M:Neon.Deployment.ProfileRequest.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Deployment.ProfileResponse">
            <summary>
            Abstracts Neon Profile Service named pipe command responses.
            </summary>
        </member>
        <member name="M:Neon.Deployment.ProfileResponse.Create(System.String)">
            <summary>
            Creates a successful command response with with a simple string value.
            </summary>
            <param name="value">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.Deployment.ProfileResponse"/>.</returns>
        </member>
        <member name="M:Neon.Deployment.ProfileResponse.Create(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Creates a successful command response with with a JSON value.
            </summary>
            <param name="jObject">The JSON value.</param>
            <returns>The <see cref="T:Neon.Deployment.ProfileResponse"/>.</returns>
        </member>
        <member name="M:Neon.Deployment.ProfileResponse.CreateError(System.String,System.String)">
            <summary>
            Creates a failed command response with an error message.
            </summary>
            <param name="status">The status code (one of the <see cref="T:Neon.Deployment.ProfileStatus"/> values).</param>
            <param name="message">The error message.</param>
            <returns>The <see cref="T:Neon.Deployment.ProfileResponse"/>.</returns>
        </member>
        <member name="M:Neon.Deployment.ProfileResponse.Parse(System.String)">
            <summary>
            Parses a request from a line of text read from the named pipe.
            </summary>
            <param name="responseLine">The response line.</param>
            <returns>The <see cref="T:Neon.Deployment.ProfileResponse"/>.</returns>
            <exception cref="T:System.FormatException">Thrown for invalid response lines.</exception>
        </member>
        <member name="M:Neon.Deployment.ProfileResponse.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileResponse.Success">
            <summary>
            Returns <c>true</c> for successful requests, <c>false</c> for failed ones.
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileResponse.Status">
            <summary>
            One of the <see cref="T:Neon.Deployment.ProfileStatus"/> values.  This
            defaults to <see cref="F:Neon.Deployment.ProfileStatus.OK"/>.
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileResponse.Value">
            <summary>
            Returns the simply response string (for non-JSON responses).
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileResponse.JObject">
            <summary>
            Returns the <see cref="P:Neon.Deployment.ProfileResponse.JObject"/> for JSON responses.
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileResponse.Error">
            <summary>
            Returns the error message for failed requests.
            </summary>
        </member>
        <member name="M:Neon.Deployment.ProfileResponse.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Deployment.ProfileServer">
            <summary>
            Implements a named-pipe based server that will be used to receive
            requests from <see cref="T:Neon.Deployment.MaintainerProfile"/>.  This server listens
            on a named pipe and only allows connections from other processes 
            running on behalf of the current user.
            </summary>
            <remarks>
            <note>
            This class currently supports only Windows.
            </note>
            <para>
            This server implements simple string based request response protocol,
            where the client writes a line of text with the request and the server
            sends a line of text as the response.  Only one request/response per
            client pipe connection is allowed.  Requests are formatted like:
            </para>
            <example>
            <b>COMMAND:</b> [ ARG1=VALUE1, ARG2=VALUE2,... ]
            </example>
            <para>
            where <b>COMMAND</b> is one of the values below with one or more comma
            separated arguments formatted as name/value pairs.  Response lines are
            formatted like:
            </para>
            <example>
            <b>OK:</b>
            <b>OK: RESULT</b>
            <b>OK-JSON: JSON</b>
            <b>ERROR: MESSAGE</b>
            </example>
            <para>
            where the "OK:" and "OK-JSON:" prefixes indicate that the operation succeeded.
            Some operations like password or value lookups simply return the request result
            as the string after the prefix.  Future operations may return a JSON result.
            </para>
            <para>
            The <b>ERROR[STATUS]:</b> prefix indicates an error occured.  <b>STATUS</b> identifies
            the specific error and the response will typically include an message describing
            what happened.  The supported status codes are defined by <see cref="T:Neon.Deployment.ProfileStatus"/>.
            </para>
            <para>
            Here are the supported commands:
            </para>
            <list type="table">
            <item>
                <term><b>ENSURE-AUTHENTICATED</b></term>
                <description>
                <para><c>(seconds)</c></para>
                <para>
                Ensures that the profile server is currently signed-in and also extends the
                sign-in period.
                </para>
                </description>
            </item>
            <item>
                <term><b>SIGN-OUT</b></term>
                <description>
                Signs the profile server out of the credentials source.
                </description>
            </item>
            <item>
                <term><b>GET-SECRET-PASSWORD</b></term>
                <description>
                <para><c>(name, [vault], [masterpassword])</c></para>
                <para>
                This requests a password from 1Password by <b>name</b> and <b>vault</b>, which
                is optional and defaults to the user name as defined by the <b>userVault</b>
                Neon Assistant setting.  The password is returned as the response.
                </para>
                <para>
                <b>masterpassword</b> is optional.  This is passed in circumstances where the
                caller already knows the master password, such as for fully automated
                CI/CD operations.
                </para>
                <note>
                The value returned by the protocol is value encoded as UTF-8 and then converted
                to base64.  This allows for multi-line results.
                </note>
                </description>
            </item>
            <item>
                <term><b>GET-SECRET-VALUE</b></term>
                <description>
                <para><c>(name, [vault], [masterpassword])</c></para>
                <para>
                This requests a secret value from 1Password by <b>name</b> and <b>vault</b>, which
                is optional and defaults to the user name as defined by the <b>userVault</b>
                Neon Assistant setting.  The value is returned as the response.
                </para>
                <para>
                <b>masterpassword</b> is optional.  This is passed in circumstances where the
                caller already knows the master password, such as for fully automated
                CI/CD operations.
                </para>
                <note>
                The value returned by the protocol is value encoded as UTF-8 and then converted
                to base64.  This allows for multi-line results.
                </note>
                </description>
            </item>
            <item>
                <term><b>GET-PROFILE-VALUE</b></term>
                <description>
                <para><c>(name)</c></para>
                <para>
                This requests a profile value the user's local profile by <c>NAME</c>.
                he value is returned as the response.
                </para>
                <note>
                The value returned by the protocol is value encoded as UTF-8 and then converted
                to base64.  This allows for multi-line results.
                </note>
                </description>
            </item>
            <item>
                <term><b>CALL</b></term>
                <description>
                <para>
                This submits an arbitrary operation to the server, passing arguments and
                returning a result string.  We're using this to workaround some limitations
                with the GHCR REST API by locating the implementation in neon-assistant.
                </para>
                <para>
                We may use this in the future for other neon-assistant interactions.
                </para>
                <note>
                The value returned by the protocol is value encoded as UTF-8 and then converted
                to base64.  This allows for multi-line results.
                </note>
                </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Neon.Deployment.ProfileServer.ParseSecretName(System.String)">
            <summary>
            <para>
            Parses a secret name by extracting the <b>name</b> and <b>property</b>
            components.  secret names can be formatted like: <b>NAME</b> or <b>NAME[PROPERTY]</b>.
            </para>
            <note>
            When the property syntax passed is malformed, we're just going to return the
            entire input string as the name rather than throwing an exception here.  This
            will probably result in a failed lookup which will be reported to the user who
            will have a good chance then of figuring out what happened.
            </note>
            </summary>
            <param name="secretName">The secret name.</param>
            <returns>An anonymous structure including the name and property (if specified).</returns>
        </member>
        <member name="M:Neon.Deployment.ProfileServer.#ctor(System.String,System.Int32)">
            <summary>
            <para>
            Constructor.
            </para>
            <note>
            <see cref="T:Neon.Deployment.ProfileServer"/> currently supports only Windows.
            </note>
            </summary>
            <param name="pipeName">The server named pipe name.  This defaults to <see cref="F:Neon.Deployment.DeploymentHelper.NeonProfileServicePipe"/>.</param>
            <param name="threadCount">Optionally specifies the number of threads to create to handle inbound requests.  This defaults to <b>10</b>.</param>
        </member>
        <member name="M:Neon.Deployment.ProfileServer.Start">
            <summary>
            Starts the server.  You must call this after configuring the handler callbacks.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the handlers are not initialized.</exception>
        </member>
        <member name="M:Neon.Deployment.ProfileServer.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Deployment.ProfileServer.GetIsReady">
            <summary>
            Optional callback used to determine whether the profile server implementation
            is ready for requests.  The handler returns <c>null</c> when ready or a
            <see cref="T:Neon.Deployment.ProfileHandlerResult"/> error to be returned to the caller.
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileServer.GetProfileValueHandler">
            <summary>
            <para>
            Callback that retrieves a profile value.  The parameters is the profile value name.
            </para>
            <note>
            This must be initalized before calling <see cref="M:Neon.Deployment.ProfileServer.Start"/>.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileServer.EnsureAuthenticatedHandler">
            <summary>
            <para>
            Callback that ensures that the server is signed-in and also extends the sign-in period.
            </para>
            <note>
            This must be initalized before calling <see cref="M:Neon.Deployment.ProfileServer.Start"/>.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileServer.SignoutHandler">
            <summary>
            <para>
            Callback that signs the server out from the credentials source.
            </para>
            <note>
            This must be initalized before calling <see cref="M:Neon.Deployment.ProfileServer.Start"/>.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileServer.GetSecretPasswordHandler">
            <summary>
            <para>
            Callback that retrieves a secret password.  The parameters are the secret name
            optional vault and master password.
            </para>
            <note>
            This must be initalized before calling <see cref="M:Neon.Deployment.ProfileServer.Start"/>.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileServer.GetSecretValueHandler">
            <summary>
            <para>
            Callback that retrieves a secret value.  The parameters are the secret name
            optional vault, and master password.
            </para>
            <note>
            This must be initalized before calling <see cref="M:Neon.Deployment.ProfileServer.Start"/>.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Deployment.ProfileServer.CallHandler">
            <summary>
            <para>
            Callback that performs an arbitrary operation.
            </para>
            <note>
            This must be initalized before calling <see cref="M:Neon.Deployment.ProfileServer.Start"/>.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Deployment.ProfileServer.ServerThread(System.Object)">
            <summary>
            Handles incoming client connections on a background thread.
            </summary>
            <param name="pipeIndexObject">Passes as the index into the [pipes] array this thread will use for its server side pipe.</param>
        </member>
        <member name="T:Neon.Deployment.XenServer">
            <summary>
            XenServer/XCP-ng related deployment utilities.
            </summary>
        </member>
        <member name="M:Neon.Deployment.XenServer.IsRunning(System.String,System.String,System.String)">
            <summary>
            Determines whether a specific XenServer/XCP-ng host machine is running by logging into it.
            </summary>
            <param name="addressOrFQDN">Specifies the IP address or hostname for the target XenServer host machine.</param>
            <param name="username">Specifies the username to be used to connect to the host.</param>
            <param name="password">Specifies the host password.</param>
            <returns><c>true</c> if the host machine is running.</returns>
        </member>
        <member name="M:Neon.Deployment.XenServer.RemoveVMs(System.String,System.String,System.String,System.String)">
            <summary>
            Connects to a XenServer/XCP-ng host and removes any VMs matching the name or file
            wildcard pattern, forceably shutting the VMs down when necessary.  Note that the
            VM's drives will also be removed.
            </summary>
            <param name="addressOrFQDN">Specifies the IP address or hostname for the target XenServer host machine.</param>
            <param name="username">Specifies the username to be used to connect to the host.</param>
            <param name="password">Specifies the host password.</param>
            <param name="nameOrPattern">Specifies the VM name or pattern including '*' or '?' wildcards to be used to remove VMs.</param>
        </member>
    </members>
</doc>
