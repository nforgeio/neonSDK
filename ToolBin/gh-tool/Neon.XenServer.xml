<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.XenServer</name>
    </assembly>
    <members>
        <member name="T:Neon.XenServer.IXenClient">
            <summary>
            <b>INTERNAL USE ONLY:</b> Used internally by cluster as a potentially temporary
            hack required by <c>SetupController&lt;NodeMetadata&gt;</c> to display XenServer
            provisioning status.  This may be removed at some point in the future.
            </summary>
        </member>
        <member name="P:Neon.XenServer.IXenClient.Name">
            <summary>
            Returns the name of the connected XenServer.
            </summary>
        </member>
        <member name="T:Neon.XenServer.XenClient">
            <summary>
            This class provides a simple light-weight XenServer or XCP-ng 
            API that connects to the XenServer host operating system via 
            SSH and executes commands using the <b>xe</b> XenServer client
            tool.
            </summary>
            <remarks>
            <para>
            Ideally, we'd use the XenServer .NET API but at this time (Jan 2018),
            the API is not compatible with .NET Core which cluster <b>neon-cli</b>
            requires because it needs to run on Windows, OSX, and perhaps some day
            within the Ubuntu based tool container.
            </para>
            <para>
            The workaround is to simnply connect to the XenServer host via SSH
            and perform commands using the <b>xe</b> command line tool installed
            with XenServer.  We're going to take advantage of the SSH.NET package
            to handle the SSH connection and command execution.
            </para>
            <para>
            XenServer template operations are implemented by the <see cref="P:Neon.XenServer.XenClient.Template"/>
            property, storage repository operations by <see cref="P:Neon.XenServer.XenClient.Storage"/> and
            virtual machine operations by <see cref="P:Neon.XenServer.XenClient.Machine"/>.
            </para>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="F:Neon.XenServer.XenClient.LocalStorageName">
            <summary>
            Identifies the local storage repository.
            </summary>
        </member>
        <member name="M:Neon.XenServer.XenClient.ParseValues(System.String)">
            <summary>
            Parses <b>xe</b> client properties formatted like <b>name1:value1; name2: value2;...</b>
            into a dictionary, making it easy to retrieve specific values.
            </summary>
            <param name="property">The property string.</param>
            <returns>The case-insensitive dictionary.</returns>
        </member>
        <member name="M:Neon.XenServer.XenClient.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.  Note that you should dispose the instance when you're finished with it.
            </summary>
            <param name="addressOrFQDN">The target XenServer IP address or FQDN.</param>
            <param name="username">The user name.</param>
            <param name="password">The password.</param>
            <param name="name">Optionally specifies the XenServer name.</param>
            <param name="logFolder">
            The folder where log files are to be written, otherwise <c>null</c> or 
            empty to disable logging.
            </param>
        </member>
        <member name="M:Neon.XenServer.XenClient.Dispose">
            <summary>
            Releases any resources associated with the instance.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenClient.Name">
            <summary>
            Returns the XenServer name as passed to the constructor.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenClient.Address">
            <summary>
            Returns the address or FQDN of the remote XenServer.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenClient.Storage">
            <summary>
            Implements the XenServer storage repository operations.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenClient.Template">
            <summary>
            Implements the XenServer virtual machine template operations.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenClient.Machine">
            <summary>
            Implements the XenServer virtual machine operations.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenClient.LogWriter">
            <summary>
            Returns the client's log writer or <c>null</c>.
            </summary>
        </member>
        <member name="M:Neon.XenServer.XenClient.EnsureNotDisposed">
            <summary>
            Verifies that that the instance hasn't been disposed.
            </summary>
        </member>
        <member name="M:Neon.XenServer.XenClient.NormalizeArgs(System.String,System.String[])">
            <summary>
            Adds the host and credential arguments to the command and arguments passed.
            </summary>
            <param name="command">The XE command.</param>
            <param name="args">The command arguments.</param>
            <returns>
            The complete set of arguments to the <b>xe</b> command including the host,
            credentials, command and command arguments.
            </returns>
        </member>
        <member name="M:Neon.XenServer.XenClient.LogXeCommand(System.String,System.String[],Neon.Common.ExecuteResponse)">
            <summary>
            Logs an XE command execution.
            </summary>
            <param name="command">The <b>XE-CLI</b> command.</param>
            <param name="args">The command arguments.</param>
            <param name="response">The command response.</param>
            <returns>The <paramref name="response"/>.</returns>
        </member>
        <member name="M:Neon.XenServer.XenClient.Invoke(System.String,System.String[])">
            <summary>
            Invokes a low-level <b>XE-CLI</b> command on the remote XenServer host
            that returns text.
            </summary>
            <param name="command">The <b>XE-CLI</b> command.</param>
            <param name="args">The optional arguments formatted as <b>name=value</b>.</param>
            <returns>The command response.</returns>
        </member>
        <member name="M:Neon.XenServer.XenClient.InvokeItems(System.String,System.String[])">
            <summary>
            Invokes a low-level <b>XE-CLI</b> command on the remote XenServer host
            that returns a list of items.
            </summary>
            <param name="command">The <b>XE-CLI</b> command.</param>
            <param name="args">The optional arguments formatted as <b>name=value</b>.</param>
            <returns>The command <see cref="T:Neon.XenServer.XenResponse"/>.</returns>
        </member>
        <member name="M:Neon.XenServer.XenClient.SafeInvoke(System.String,System.String[])">
            <summary>
            Invokes a low-level <b>XE-CLI</b> command on the remote XenServer host
            that returns text, throwing an exception on failure.
            </summary>
            <param name="command">The <b>XE-CLI</b> command.</param>
            <param name="args">The optional arguments formatted as <b>name=value</b>.</param>
            <returns>The command response.</returns>
            <exception cref="T:Neon.XenServer.XenException">Thrown if the operation failed.</exception>
        </member>
        <member name="M:Neon.XenServer.XenClient.SafeInvokeItems(System.String,System.String[])">
            <summary>
            Invokes a low-level <b>XE-CLI</b> command on the remote XenServer host
            that returns a list of items, throwing an exception on failure.
            </summary>
            <param name="command">The <b>XE-CLI</b> command.</param>
            <param name="args">The optional arguments formatted as <b>name=value</b>.</param>
            <returns>The command <see cref="T:Neon.XenServer.XenResponse"/>.</returns>
            <exception cref="T:Neon.XenServer.XenException">Thrown if the operation failed.</exception>
        </member>
        <member name="M:Neon.XenServer.XenClient.GetHostInfo">
            <summary>
            Returns information about the connected XenServer host machine.
            </summary>
            <returns>The <see cref="T:Neon.XenServer.XenHostInfo"/>.</returns>
        </member>
        <member name="M:Neon.XenServer.XenClient.CreateTempIso(System.String,System.String)">
            <summary>
            Used for temporarily uploading an ISO disk to a XenServer such that it can be mounted
            to a VM, typically for one-time initialization purposes.  NeonKUBE uses this as a very
            simple poor man's alternative to <b>cloud-init</b> for initializing a VM on first boot.
            </summary>
            <param name="isoPath">Path to the source ISO file on the local workstation.</param>
            <param name="srName">Optionally specifies the storage repository name.  <b>neon-UUID</b> with a generated UUID will be used by default.</param>
            <returns>A <see cref="T:Neon.XenServer.XenTempIso"/> with information about the new storage repository and its contents.</returns>
            <remarks>
            <para>
            During cluster setup on virtualization platforms like XenServer and Hyper-V, NeonKUBE need
            to configure new VMs with IP addresses, hostnames, etc.  Traditionally, we've relied on
            being able to SSH into the VM to perform all of these actions, but this relied on being
            VM being able to obtain an IP address via DHCP and for setup to be able to discover the
            assigned address.
            </para>
            <para>
            The dependency on DHCP is somewhat problematic, because it's conceivable that this may
            not be available for more controlled environments.  We looked into using Linux <b>cloud-init</b>
            for this, but that requires additional local infrastructure for non-cloud deployments and
            was also a bit more complex than what we had time for.
            </para>
            <para>
            Instead of <b>cloud-init</b>, we provisioned our XenServer and Hyper-V node templates
            with a <b>neon-init</b> service that runs before the network service to determine
            whether a DVD (ISO) is inserted into the VM and runs the <b>neon-init.sh</b> script
            there one time, if it exists.  This script will initialize the node's IP address and 
            could also be used for other configuration as well, like setting user credentials.
            </para>
            <note>
            In theory, we could have used the same technique for mounting a <b>cloud-init</b> data source
            via this ISO, but we decided not to go there, at least for now (we couldn't get that working).
            </note>
            <note>
            NeonKUBE doesn't use this technique for true cloud deployments (AWS, Azure, Google,...) because
            we can configure VM networking directly via the cloud APIs.  
            </note>
            <para>
            The XenServer requires the temporary ISO implementation to be a bit odd.  We want these temporary
            ISOs to be created directly on the XenServer host machine so users won't have to configure any
            additional infrastructure as well as to simplify cluster setup.  We'll be creating a local
            ISO storage repository from a folder on the host.  Any files to be added to the repository
            must exist when the repository is created and it is not possible to add, modify, or remove
            files from a repository after its been created.
            </para>
            <note>
            XenServer hosts have only 4GB of free space at the root Linux level, so you must take care 
            not to create large ISOs or to allow these to accumulate.
            </note>
            <para>
            This method uploads the ISO file <paramref name="isoPath"/> from the local workstation to
            the XenServer host, creating a new folder named with a UUID.  Then a new storage repository
            will be created from this folder and a <see cref="T:Neon.XenServer.XenTempIso"/> will be returned holding
            details about the new storage repository and its contents.  The setup code will use this to 
            insert the ISO into a VM.
            </para>
            <para>
            Once the setup code is done with the ISO, it will eject it from the VM and call
            <see cref="M:Neon.XenServer.XenClient.RemoveTempIso(Neon.XenServer.XenTempIso)"/> to remove the storage repository.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.XenServer.XenClient.RemoveTempIso(Neon.XenServer.XenTempIso)">
            <summary>
            Removes a temporary ISO disk along with its PBD and storage repository.
            </summary>
            <param name="tempIso">The ISO disk information returned by <see cref="M:Neon.XenServer.XenClient.CreateTempIso(System.String,System.String)"/>.</param>
            <remarks>
            <see cref="M:Neon.XenServer.XenClient.CreateTempIso(System.String,System.String)"/> for more information.
            </remarks>
        </member>
        <member name="M:Neon.XenServer.XenClient.Connect">
            <summary>
            Establishes an SSH connection to the assocated XenServer.
            </summary>
            <returns>The connected <see cref="T:Neon.SSH.LinuxSshProxy"/>.</returns>
        </member>
        <member name="M:Neon.XenServer.XenClient.WipeHost(System.Boolean,System.Func{Neon.XenServer.XenTemplate,System.Boolean})">
            <summary>
            <para>
            Wipes the connected XenServer host by terminating and shutting down all virtual
            machines by default and optionally, selected virtual machine templates.
            </para>
            <note>
            **WARNING:** This is dangerous and should only be used when you are **VERY**
            sure that important workloads are not being hosted on the XenServer.  We
            generally use this for integration testing where XenServer hosts are dedicated
            exclusively for specific test runners.
            </note>
            </summary>
            <param name="deleteVMs">Optionally disable virtual machine removal by passing <c>false</c>.</param>
            <param name="templateSelector">Optionally specifies a selector that chooses which templates are removed.</param>
        </member>
        <member name="T:Neon.XenServer.XenClient.MachineOperations">
            <summary>
            Implements the <see cref="T:Neon.XenServer.XenClient"/> virtual machine operations.
            </summary>
        </member>
        <member name="M:Neon.XenServer.XenClient.MachineOperations.#ctor(Neon.XenServer.XenClient)">
            <summary>
            Constructor.
            </summary>
            <param name="client">The XenServer client instance.</param>
        </member>
        <member name="M:Neon.XenServer.XenClient.MachineOperations.List">
            <summary>
            Lists the XenServer virtual machines.
            </summary>
            <returns>The list of virtual machines.</returns>
            <exception cref="T:Neon.XenServer.XenException">Thrown if the operation failed.</exception>
            <remarks>
            <note>
            Only virtual machines with names will be returned with the 
            assumption that unnamed VMs are XenServer infrastructure
            related.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.XenServer.XenClient.MachineOperations.Find(System.String,System.String)">
            <summary>
            Finds a specific virtual machine by name or unique ID.
            </summary>
            <param name="name">Specifies the target name.</param>
            <param name="uuid">Specifies the target unique ID.</param>
            <returns>The named item or <c>null</c> if it doesn't exist.</returns>
            <exception cref="T:Neon.XenServer.XenException">Thrown if the operation failed.</exception>
            <remarks>
            <note>
            One of <paramref name="name"/> or <paramref name="uuid"/> must be specified.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.XenServer.XenClient.MachineOperations.Create(System.String,System.String,System.Int32,System.Int64,System.Int64,System.Boolean,System.Collections.Generic.IEnumerable{Neon.XenServer.XenVirtualDisk},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>
            Creates a virtual machine from a template, optionally initializing its memory and 
            disk size.
            </para>
            <note>
            This does not start the machine.
            </note>
            </summary>
            <param name="name">Name for the new virtual machine.</param>
            <param name="templateName">Identifies the template.</param>
            <param name="vcpus">Optionally specifies the number of CPU cores to be assigned.  This defaults to <b>2</b>.</param>
            <param name="memoryBytes">Optionally specifies the memory assigned to the machine (overriding the template).</param>
            <param name="diskBytes">Optionally specifies the primary disk size (overriding the template).</param>
            <param name="snapshot">Optionally specifies that the virtual machine should snapshot the template.  This defaults to <c>false</c>.</param>
            <param name="extraDisks">
            Optionally specifies any additional virtual disks to be created and 
            then attached to the new virtual machine.
            </param>
            <param name="primaryStorageRepository">
            Optionally specifies the storage repository where the virtual machine's
            primary disk will be created.  This defaults to <b>Local storage</b>.
            </param>
            <param name="extraStorageRespository">
            Optionally specifies the storage repository where any extra disks for
            the virtual machine will be created.  This defaults to <b>Local storage</b>.
            <note>
            The default value assumes that your XenServer pool is <b>NOT CONFIGURED FOR HA</b>.
            Auto start VMs are not recommended for HA pools due to potential conflicts.  We're
            not sure what problems having autostart VMs in a HA pool cause.
            </note>
            </param>
            <param name="description">
            <para>
            Optionally specifies the description to be assigned to the virtual machine.
            </para>
            <note>
            This may not include CR or LF characters.
            </note>
            </param>
            <param name="tags">Optionally specifies any tags to be added to the virtual machine.</param>
            <returns>The new <see cref="T:Neon.XenServer.XenVirtualMachine"/>.</returns>
            <exception cref="T:Neon.XenServer.XenException">Thrown if the operation failed.</exception>
            <remarks>
            <note>
            <paramref name="snapshot"/> is ignored if the virtual machine template is not 
            hosted by the same storage repository where the virtual machine is to be created.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.XenServer.XenClient.MachineOperations.Start(Neon.XenServer.XenVirtualMachine)">
            <summary>
            Starts a stopped virtual machine resumes a suspended or paused virtual machine.
            This does nothing when the virtual machine is already running.
            </summary>
            <param name="virtualMachine">The target virtual machine.</param>
            <exception cref="T:Neon.XenServer.XenException">Thrown if the operation failed.</exception>
        </member>
        <member name="M:Neon.XenServer.XenClient.MachineOperations.Shutdown(Neon.XenServer.XenVirtualMachine,System.Boolean)">
            <summary>
            Shuts down a virtual machine.
            </summary>
            <param name="virtualMachine">The target virtual machine.</param>
            <param name="turnOff">
            <para>
            Optionally just turns the VM off without performing a graceful shutdown first.
            </para>
            <note>
            <b>WARNING!</b> This could result in the loss of unsaved data.
            </note>
            </param>
            <exception cref="T:Neon.XenServer.XenException">Thrown if the operation failed.</exception>
        </member>
        <member name="M:Neon.XenServer.XenClient.MachineOperations.Suspend(Neon.XenServer.XenVirtualMachine)">
            <summary>
            Suspends a virtual machine by persisting its memory to disk and stopping
            the virtual machine so that it can be restarted where it left off later.
            </summary>
            <param name="virtualMachine">The target virtual machine.</param>
            <exception cref="T:Neon.XenServer.XenException">Thrown if the operation failed.</exception>
        </member>
        <member name="M:Neon.XenServer.XenClient.MachineOperations.Reboot(Neon.XenServer.XenVirtualMachine,System.Boolean)">
            <summary>
            Reboots a virtual machine.
            </summary>
            <param name="virtualMachine">The target virtual machine.</param>
            <param name="force">Optionally forces the virtual machine to reboot.</param>
            <exception cref="T:Neon.XenServer.XenException">Thrown if the operation failed.</exception>
        </member>
        <member name="M:Neon.XenServer.XenClient.MachineOperations.Remove(Neon.XenServer.XenVirtualMachine,System.Boolean)">
            <summary>
            Removes a virtual machine and its drives.
            </summary>
            <param name="virtualMachine">The target virtual machine.</param>
            <param name="keepDrives">Optionally retains the VM disks.</param>
        </member>
        <member name="M:Neon.XenServer.XenClient.MachineOperations.AddDisk(Neon.XenServer.XenVirtualMachine,Neon.XenServer.XenVirtualDisk)">
            <summary>
            <para>
            Adds a new disk to a virtual machine.
            </para>
            <note>
            The virtual machine must be stopped.
            </note>
            </summary>
            <param name="virtualMachine">The target virtual machine.</param>
            <param name="disk">The disk information.</param>
        </member>
        <member name="M:Neon.XenServer.XenClient.MachineOperations.DiskCount(Neon.XenServer.XenVirtualMachine)">
            <summary>
            Returns the number of disks attached to a virtual machine.
            </summary>
            <param name="virtualMachine">The target virtual machine.</param>
            <returns>The number of attached disks.</returns>
        </member>
        <member name="T:Neon.XenServer.XenClient.StorageOperations">
            <summary>
            Implements the <see cref="T:Neon.XenServer.XenClient"/> virtual machine template operations.
            </summary>
        </member>
        <member name="M:Neon.XenServer.XenClient.StorageOperations.#ctor(Neon.XenServer.XenClient)">
            <summary>
            Constructor.
            </summary>
            <param name="client">The XenServer client instance.</param>
        </member>
        <member name="M:Neon.XenServer.XenClient.StorageOperations.List">
            <summary>
            Lists the XenServer storage repositories.
            </summary>
            <returns>The list of storage repositories.</returns>
        </member>
        <member name="M:Neon.XenServer.XenClient.StorageOperations.Find(System.String,System.String,System.Boolean)">
            <summary>
            Finds a specific storage repository by name or unique ID.
            </summary>
            <param name="name">Specifies the target name.</param>
            <param name="uuid">Specifies the target unique ID.</param>
            <param name="mustExist">Optionally specifies that the request repository must exist.  This defaults to <c>false</c>.</param>
            <returns>The named item or <c>null</c> if it doesn't exist.</returns>
            <exception cref="T:System.ArgumentException">Thrown if neither <paramref name="name"/> or <paramref name="uuid"/> were passed.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if <paramref name="mustExist"/> is <c>true</c> and the request repository doesn't exist.</exception>
            <remarks>
            <note>
            One of <paramref name="name"/> or <paramref name="uuid"/> must be specified.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.XenServer.XenClient.StorageOperations.GetTargetStorageRepository(System.String)">
            <summary>
            Returns the XenServer storage repository where the image template and 
            virtual machine disk images will be stored.
            </summary>
            <param name="nameOrUuid">The storage repository name or UUID.</param>
            <returns>The local storage repository.</returns>
            <exception cref="T:Neon.XenServer.XenException">Thrown if the operation failed.</exception>
        </member>
        <member name="T:Neon.XenServer.XenClient.TemplateOperations">
            <summary>
            Implements the <see cref="T:Neon.XenServer.XenClient"/> virtual machine template operations.
            </summary>
        </member>
        <member name="M:Neon.XenServer.XenClient.TemplateOperations.#ctor(Neon.XenServer.XenClient)">
            <summary>
            Constructor.
            </summary>
            <param name="client">The XenServer client instance.</param>
        </member>
        <member name="M:Neon.XenServer.XenClient.TemplateOperations.List">
            <summary>
            Lists the XenServer virtual machine templates.
            </summary>
            <returns>The list of templates.</returns>
            <exception cref="T:Neon.XenServer.XenException">Thrown if the operation failed.</exception>
        </member>
        <member name="M:Neon.XenServer.XenClient.TemplateOperations.Find(System.String,System.String)">
            <summary>
            Finds a specific virtual machine template by name or unique ID.
            </summary>
            <param name="name">Specifies the target name.</param>
            <param name="uuid">Specifies the target unique ID.</param>
            <returns>The named item or <c>null</c> if it doesn't exist.</returns>
            <exception cref="T:Neon.XenServer.XenException">Thrown if the operation failed.</exception>
            <remarks>
            <note>
            One of <paramref name="name"/> or <paramref name="uuid"/> must be specified.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.XenServer.XenClient.TemplateOperations.ImportVmTemplate(System.String,System.String,System.String,System.String)">
            <summary>
            Installs from an XVA or OVA virtual machine template file on the local workstation to the 
            remote XenServer host an XVA or OVA virtual machine template, optionally renaming it.
            </summary>
            <param name="path">The path to the template file on the local workstation.</param>
            <param name="name">The optional template name.</param>
            <param name="repositoryNameOrUuid">
            Optionally specifies the target storage repository by name or UUID.  
            This defaults to <b>Local storage</b>.
            </param>
            <param name="description">
            Optionally specifies the template description.
            </param>
            <returns>The installed template.</returns>
            <exception cref="T:Neon.XenServer.XenException">Thrown if the operation failed.</exception>
        </member>
        <member name="M:Neon.XenServer.XenClient.TemplateOperations.Rename(Neon.XenServer.XenTemplate,System.String)">
            <summary>
            Renames a virtual machine template.
            </summary>
            <param name="template">The target template.</param>
            <param name="newName">The new template name.</param>
            <returns>The modified template.</returns>
            <exception cref="T:Neon.XenServer.XenException">Thrown if the operation failed.</exception>
        </member>
        <member name="M:Neon.XenServer.XenClient.TemplateOperations.Destroy(Neon.XenServer.XenTemplate)">
            <summary>
            Removes a virtual machine template.
            </summary>
            <param name="template">The target template.</param>
            <exception cref="T:Neon.XenServer.XenException">Thrown if the operation failed.</exception>
        </member>
        <member name="T:Neon.XenServer.XenException">
            <summary>
            Thrown by <see cref="T:Neon.XenServer.XenClient"/> when an error is detected.
            </summary>
        </member>
        <member name="M:Neon.XenServer.XenException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">Optionally specifies an inner exception.</param>
        </member>
        <member name="T:Neon.XenServer.XenHostInfo">
            <summary>
            Holds information about a XenServer or XCP-ng host machine.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenHostInfo.Edition">
            <summary>
            Indicates the installed edition.  This will be <b>xcp-ng</b> or <b>xenserver</b>.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenHostInfo.Version">
            <summary>
            Indicates the XenServer/XCP-ng version number.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenHostInfo.Params">
            <summary>
            Holds the raw host parameters.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenHostInfo.UsableCores">
            <summary>
            <para>
            Returns the number of cores usable by virtual machines.
            </para>
            <note>
            This includes all usable cores and includes cores that are pinned to
            specific virtual machines.
            </note>
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenHostInfo.AvailableMemory">
            <summary>
            Returns the bytes of memory available for new virtual machines.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenHostInfo.AvailableDisk">
            <summary>
            Returns the bytes of disk available for new virtual machines.
            </summary>
        </member>
        <member name="T:Neon.XenServer.XenObject">
            <summary>
            Base class for all XenServer objects that implement common properties.
            </summary>
        </member>
        <member name="M:Neon.XenServer.XenObject.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Constructs an instance from raw property values returned by the <b>xe client</b>.
            </summary>
            <param name="rawProperties">The raw object properties.</param>
        </member>
        <member name="P:Neon.XenServer.XenObject.Properties">
            <summary>
            Returns the read-only dictionary including all raw object properties.
            </summary>
        </member>
        <member name="T:Neon.XenServer.XenResponse">
            <summary>
            Holds the response from a XenServer command invoked using the <b>xe</b> CLI.
            </summary>
        </member>
        <member name="M:Neon.XenServer.XenResponse.#ctor(Neon.Common.ExecuteResponse)">
            <summary>
            Constructor.
            </summary>
            <param name="response">The low-level SSH command response.</param>
        </member>
        <member name="P:Neon.XenServer.XenResponse.Response">
            <summary>
            Returns the low-level command response.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenResponse.ExitCode">
            <summary>
            Returns the command exit code.
            </summary>
        </member>
        <member name="M:Neon.XenServer.XenResponse.EnsureSuccess">
            <summary>
            Ensures that the command executed successfully.
            </summary>
            <exception cref="T:Neon.Common.ExecuteException">Thrown when the command failed.</exception>
        </member>
        <member name="P:Neon.XenServer.XenResponse.Items">
            <summary>
            The list of raw property dictionaries returned by the command.
            </summary>
        </member>
        <member name="T:Neon.XenServer.XenStorageRepository">
            <summary>
            Describes a XenServer storage repository.
            </summary>
        </member>
        <member name="M:Neon.XenServer.XenStorageRepository.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Constructs an instance from raw property values returned by the <b>xe client</b>.
            </summary>
            <param name="rawProperties">The raw object properties.</param>
        </member>
        <member name="P:Neon.XenServer.XenStorageRepository.Uuid">
            <summary>
            Returns the repository unique ID.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenStorageRepository.NameLabel">
            <summary>
            Returns the repository name.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenStorageRepository.NameDescription">
            <summary>
            Returns the repository description.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenStorageRepository.Host">
            <summary>
            Returns the XenServer host.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenStorageRepository.Type">
            <summary>
            Returns the repository type.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenStorageRepository.ContentType">
            <summary>
            Returns the type of content stored in the repository.
            </summary>
        </member>
        <member name="T:Neon.XenServer.XenTempIso">
            <summary>
            Holds information about a temporary ISO.  These are created temporarily and 
            used during NeonKUBE cluster setup to inject a configuration script into a new 
            node VM during cluster setup.  See <see cref="M:Neon.XenServer.XenClient.CreateTempIso(System.String,System.String)"/>
            for more information.
            </summary>
        </member>
        <member name="M:Neon.XenServer.XenTempIso.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenTempIso.SrUuid">
            <summary>
            Returns the UUID for the temporary storage repository holding the ISO.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenTempIso.PdbUuid">
            <summary>
            Returns the UUID for the temporary Physical Block Device (PBD) hosting the
            storage repository.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenTempIso.VdiUuid">
            <summary>
            Returns the UUID for the ISO VDI.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenTempIso.IsoName">
            <summary>
            Returns the name of the CD/DVD that can be insterted into a VM.  This
            is currently set to a unique name like <b>neon-dvd-UUID.iso</b> to avoid
            conflicts.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenTempIso.SrPath">
            <summary>
            Returns the path on the XenServer for the folder for the storage
            repository.
            </summary>
        </member>
        <member name="T:Neon.XenServer.XenTemplate">
            <summary>
            Describes a XenServer virtual machine template.
            </summary>
        </member>
        <member name="M:Neon.XenServer.XenTemplate.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Constructs an instance from raw property values returned by the <b>xe client</b>.
            </summary>
            <param name="rawProperties">The raw object properties.</param>
        </member>
        <member name="P:Neon.XenServer.XenTemplate.Uuid">
            <summary>
            Returns the repository unique ID.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenTemplate.NameLabel">
            <summary>
            Returns the repository name.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenTemplate.NameDescription">
            <summary>
            Returns the repository description.
            </summary>
        </member>
        <member name="T:Neon.XenServer.XenVirtualDisk">
            <summary>
            Specifies virtual disk creation parameters.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenVirtualDisk.Name">
            <summary>
            Optionally specifies the disk name.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenVirtualDisk.Description">
            <summary>
            Optionally specifies the disk description.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenVirtualDisk.Size">
            <summary>
            The disk size in bytes.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenVirtualDisk.StorageRepository">
            <summary>
            Identifies the storage repository where the disk will be created
            This defaults to <see cref="F:Neon.XenServer.XenClient.LocalStorageName"/>, indicating
            that the disk will be created on the XenServer host's local 
            file system.
            </summary>
        </member>
        <member name="T:Neon.XenServer.XenVirtualMachine">
            <summary>
            Describes a XenServer virtual machine.
            </summary>
        </member>
        <member name="M:Neon.XenServer.XenVirtualMachine.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Constructs an instance from raw property values returned by the <b>xe client</b>.
            </summary>
            <param name="rawProperties">The raw object properties.</param>
        </member>
        <member name="P:Neon.XenServer.XenVirtualMachine.Uuid">
            <summary>
            Returns the virtual machine ID.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenVirtualMachine.NameLabel">
            <summary>
            Returns the virtual machine name.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenVirtualMachine.PowerState">
            <summary>
            Returns the virtual machine state.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenVirtualMachine.Address">
            <summary>
            Returns the IP address associated with the VM or <c>null</c>
            if the VM is not running or hasn't obtained an address yet.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenVirtualMachine.Description">
            <summary>
            Returns the virtual machine description
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenVirtualMachine.Tags">
            <summary>
            Returns the virtual machine tags.
            </summary>
        </member>
        <member name="P:Neon.XenServer.XenVirtualMachine.IsRunning">
            <summary>
            Indicates whether the virtual machine is running.
            </summary>
        </member>
        <member name="T:Neon.XenServer.XenVmPowerState">
            <summary>
            Enumerates the possible virtual machine states.
            </summary>
        </member>
        <member name="F:Neon.XenServer.XenVmPowerState.Unknown">
            <summary>
            Could not determine the virtual machine state.
            </summary>
        </member>
        <member name="F:Neon.XenServer.XenVmPowerState.Halted">
            <summary>
            The virtual machine is turned off.
            </summary>
        </member>
        <member name="F:Neon.XenServer.XenVmPowerState.Paused">
            <summary>
            The virtual machine is either paused with its memory still loaded in RAM
            or suspended with its memory persisted to disk.
            </summary>
        </member>
        <member name="F:Neon.XenServer.XenVmPowerState.Running">
            <summary>
            The virtual machine is running.
            </summary>
        </member>
        <member name="T:YYProject.XXHash.XXHash64">
            <summary>
            Represents the class which provides a implementation of the xxHash64 algorithm.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:YYProject.XXHash.XXHash64.Create">
            <summary>
            Creates an instance of <see cref="T:YYProject.XXHash.XXHash64"/> class by default seed(0).
            </summary>
            <returns></returns>
        </member>
        <member name="M:YYProject.XXHash.XXHash64.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of XXHash64 algorithm.
            <para>This method always throws <see cref="T:System.NotSupportedException"/>. </para>
            </summary>
            <param name="algName">The hash algorithm implementation to use.</param>
            <returns>This method always throws <see cref="T:System.NotSupportedException"/>. </returns>
            <exception cref="T:System.NotSupportedException">This method is not be supported.</exception>
        </member>
        <member name="M:YYProject.XXHash.XXHash64.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YYProject.XXHash.XXHash64"/> class by default seed(0).
            </summary>
        </member>
        <member name="M:YYProject.XXHash.XXHash64.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:YYProject.XXHash.XXHash64"/> class, and sets the <see cref="P:YYProject.XXHash.XXHash64.Seed"/> to the specified value.
            </summary>
            <param name="seed">Represent the seed to be used for xxHash64 computing.</param>
        </member>
        <member name="P:YYProject.XXHash.XXHash64.HashUInt64">
            <summary>
            Gets the <see cref="T:System.UInt64"/> value of the computed hash code.
            </summary>
            <exception cref="T:System.InvalidOperationException">Computation has not yet completed.</exception>
        </member>
        <member name="P:YYProject.XXHash.XXHash64.Seed">
            <summary>
             Gets or sets the value of seed used by xxHash64 algorithm.
            </summary>
            <exception cref="T:System.InvalidOperationException">Computation has not yet completed.</exception>
        </member>
        <member name="M:YYProject.XXHash.XXHash64.Initialize">
            <summary>
            Initializes this instance for new hash computing.
            </summary>
        </member>
        <member name="M:YYProject.XXHash.XXHash64.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:YYProject.XXHash.XXHash64.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
    </members>
</doc>
