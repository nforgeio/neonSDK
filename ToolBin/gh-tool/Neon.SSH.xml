<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.SSH</name>
    </assembly>
    <members>
        <member name="T:Neon.SSH.CommandBundle">
            <summary>
            Describes a collection of files to be uploaded to a Linux server along with the command to be executed 
            after the files have been unpacked.
            </summary>
            <remarks>
            <para>
            This class is intended for use with the <see cref="M:Neon.SSH.LinuxSshProxy.RunCommand(Neon.SSH.CommandBundle,Neon.SSH.RunOptions)"/>
            and  <see cref="M:Neon.SSH.LinuxSshProxy.SudoCommand(Neon.SSH.CommandBundle,Neon.SSH.RunOptions)"/> methods for situations where
            one or more files need to be uploaded to a cluster node and be used when a command is executed.
            </para>
            <para>
            To use this class, construct an instance passing the command and arguments to be executed.  The command be 
            an absolute reference to an executable in folders such as <b>/bin</b> or <b>/usr/local/bin</b>, an executable
            somewhere on the current PATH, or relative to the files unpacked from the bundle.  The current working directory
            will be set to the folder where the bundle was unpacked, so you can reference local executables like
            <b>./MyExecutable</b>.
            </para>
            <para>
            Once a bundle is constructed, you will add <see cref="T:Neon.SSH.CommandFile"/> instances specifying the
            file data you want to include.  These include the relative path to the file to be uploaded as well
            as its text or binary data.  You may also indicate whether each file is to be marked as executable.
            </para>
            </remarks>
        </member>
        <member name="F:Neon.SSH.CommandBundle.ArgBreak">
            <summary>
            <para>
            This is a meta command line argument that can be added to a command
            to indicate that the following non-command line option is not to be
            considered to be the value for the previous command line option.
            </para>
            <para>
            This is entirely optional but can make <see cref="M:Neon.SSH.CommandBundle.ToBash(System.String)"/> 
            formatting a bit nicer.
            </para>
            </summary>
        </member>
        <member name="M:Neon.SSH.CommandBundle.NormalizeArgs(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Normalizes the bundle command arguments into a single list of strings
            by expanding any arguments that can enumerate strings, normalizing common
            value types like booleans, and adding surrounding quotes if necessary.
            </summary>
            <param name="args">The arguments to be normalized.</param>
            <param name="keepArgBreaks">
            Optionally specifies that any <see cref="F:Neon.SSH.CommandBundle.ArgBreak"/> arguments are 
            included in the output.
            </param>
            <returns>List of normalized arguments.</returns>
        </member>
        <member name="M:Neon.SSH.CommandBundle.SafeArg(System.String)">
            <summary>
            Ensures that a Bash command argument is escaped as necessary.
            </summary>
            <param name="arg">The argument string.</param>
            <returns>The safe argument.</returns>
        </member>
        <member name="M:Neon.SSH.CommandBundle.FromScript(System.String)">
            <summary>
            Creates a bundle that simply uploads and runs a (<c>string</c>) script.
            </summary>
            <param name="script">The script text.</param>
            <returns>The <see cref="T:Neon.SSH.CommandBundle"/>.</returns>
        </member>
        <member name="M:Neon.SSH.CommandBundle.FromScript(System.Text.StringBuilder)">
            <summary>
            Creates a bundle that simply uploads and runs a (<see cref="T:System.Text.StringBuilder"/>) script.
            </summary>
            <param name="script">The script text.</param>
            <returns>The <see cref="T:Neon.SSH.CommandBundle"/>.</returns>
        </member>
        <member name="M:Neon.SSH.CommandBundle.#ctor(System.String,System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The command arguments or <c>null</c>.</param>
            <remarks>
            <para>
            The <paramref name="args"/> parameter optionally specifies an array of
            command argument objects.  With a few exceptions, these arguments will 
            be passed to the command by rendering the object into a <c>string</c>
            by calling its <see cref="M:System.Object.ToString"/> method.  <c>null</c>
            and empty string arguments will be ignored and <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            arguments will be expanded.
            </para>
            <para>
            <c>bool</c> and <c>double</c> arguments get special treatment.  <c>bool</c>
            values will be rendered as <c>true</c> or <c>false</c> and <c>double</c>
            arguments will be rendered using <c>double.ToString("#.0")</c>.  If you
            need something different, you can convert your arguments to strings first.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.SSH.CommandBundle.Command">
            <summary>
            Returns the command to be executed after the bundle has been unpacked.
            </summary>
        </member>
        <member name="P:Neon.SSH.CommandBundle.Args">
            <summary>
            Returns the command arguments.
            </summary>
        </member>
        <member name="M:Neon.SSH.CommandBundle.AddFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a text file to be uploaded before executing the command.
            </summary>
            <param name="path">The file path relative to the directory where the command will be executed.</param>
            <param name="text">The file text.</param>
            <param name="isExecutable">Optionally specifies that the file is to be marked as executable.</param>
            <param name="linuxCompatible">
            Optionally controls whether the text is made Linux compatible by removing carriage returns
            and expanding TABs into spaces.  This defaults to <c>true</c>.
            </param>
            <remarks>The <see cref="T:Neon.SSH.CommandBundle"/> for fluent style programming.</remarks>
        </member>
        <member name="M:Neon.SSH.CommandBundle.AddFile(System.String,System.Byte[],System.Boolean)">
            <summary>
            Adds a binary file to be uploaded before executing the command.
            </summary>
            <param name="path">The file path relative to the directory where the command will be executed.</param>
            <param name="data">The file data.</param>
            <param name="isExecutable">Optionally specifies that the file is to be marked as executable.</param>
            <remarks>The<see cref="T:Neon.SSH.CommandBundle"/> for fluent style programming.</remarks>
        </member>
        <member name="M:Neon.SSH.CommandBundle.AddZip(System.String,System.String)">
            <summary>
            Creates a ZIP file, recursively adding all of the files in a local source folder and
            then adds the ZIP file to the bundle.
            </summary>
            <param name="path">The file path relative to the directory where the command will be executed.</param>
            <param name="sourceFolder">Path to the local source folder containing the files to be zipped.</param>
            <remarks>The <see cref="T:Neon.SSH.CommandBundle"/> for fluent style programming.</remarks>
        </member>
        <member name="M:Neon.SSH.CommandBundle.Validate">
            <summary>
            Verifies that the bundle is valid.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the bundle is not valid.</exception>
        </member>
        <member name="M:Neon.SSH.CommandBundle.ToString">
            <summary>
            Renders the command and arguments as a Bash compatible command line.
            </summary>
            <returns>The command line.</returns>
        </member>
        <member name="M:Neon.SSH.CommandBundle.ToBash(System.String)">
            <summary>
            <para>
            Formats the command such that it could be added to a Bash script.
            </para>
            <note>
            This doesn't work if the command has attached files.
            </note>
            </summary>
            <param name="comment">Optional comment text (without a leading <b>#</b>).</param>
            <returns>The command formatted for Bash.</returns>
            <exception cref="T:System.NotSupportedException">
            Thrown because <see cref="M:Neon.SSH.CommandBundle.ToBash(System.String)"/> does not support commands with attached files.
            </exception>
            <remarks>
            This can be useful for making copies of cluster configuration commands
            on the server as scripts for situations where system operators need
            to manually tweak things.
            </remarks>
        </member>
        <member name="T:Neon.SSH.CommandFile">
            <summary>
            Describes a file to be included in a <see cref="T:Neon.SSH.CommandBundle"/>.
            </summary>
        </member>
        <member name="M:Neon.SSH.CommandFile.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Neon.SSH.CommandFile.Path">
            <summary>
            The relative path of the file within the bundle.
            </summary>
        </member>
        <member name="P:Neon.SSH.CommandFile.Text">
            <summary>
            The file text.  This will be uploaded encoded as UTF-8.
            </summary>
            <remarks>
            <note>
            No transformations will be performed on the text.  Specifically, Windows style line endings
            <b>will not</b> be converted to Linux standard TAB characters will not be expanded into
            spaces.  You'll need perform these yourself if necessary.
            </note>
            <note>
            Only one of <see cref="P:Neon.SSH.CommandFile.Text"/> or <see cref="P:Neon.SSH.CommandFile.Data"/> may be specified.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.SSH.CommandFile.Data">
            <summary>
            The file binary data.
            </summary>
            <remarks>
            <note>
            Only one of <see cref="P:Neon.SSH.CommandFile.Text"/> or <see cref="P:Neon.SSH.CommandFile.Data"/> may be specified.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.SSH.CommandFile.IsExecutable">
            <summary>
            Indicates whether the file should be marked as executable after being
            unpacked on the Linux machine.
            </summary>
        </member>
        <member name="T:Neon.SSH.CommandResponse">
            <summary>
            Describes the results of a command executed on the remote server using
            <see cref="M:Neon.SSH.LinuxSshProxy.RunCommand(Neon.SSH.CommandBundle,Neon.SSH.RunOptions)"/> 
            or <see cref="M:Neon.SSH.LinuxSshProxy.SudoCommand(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="P:Neon.SSH.CommandResponse.Command">
            <summary>
            Returns the original command line.
            </summary>
        </member>
        <member name="P:Neon.SSH.CommandResponse.BashCommand">
            <summary>
            Returns the command nicely formatted across multiple lines of text
            that is suitable for including in a Bash script.
            </summary>
        </member>
        <member name="P:Neon.SSH.CommandResponse.ExitCode">
            <summary>
            Returns the command exit code.
            </summary>
        </member>
        <member name="P:Neon.SSH.CommandResponse.Success">
            <summary>
            Returns <c>true</c> if the command exit code was zero, 
            <b>false</b> otherwise.
            </summary>
        </member>
        <member name="P:Neon.SSH.CommandResponse.ProxyIsFaulted">
            <summary>
            Indicates whether the command failed because the proxy is faulted due to a previous error.
            </summary>
        </member>
        <member name="P:Neon.SSH.CommandResponse.OutputText">
            <summary>
            Returns the command standard output as a string when <see cref="F:Neon.SSH.RunOptions.BinaryOutput"/> 
            is not specified.
            </summary>
        </member>
        <member name="M:Neon.SSH.CommandResponse.OpenOutputTextReader">
            <summary>
            Creates a <see cref="T:System.IO.TextReader"/> over the command's standard output result.
            </summary>
            <returns>The <see cref="T:System.IO.TextReader"/>.</returns>
        </member>
        <member name="P:Neon.SSH.CommandResponse.ErrorText">
            <summary>
            Returns the command standard error as a string.
            </summary>
        </member>
        <member name="M:Neon.SSH.CommandResponse.OpenErrorTextReader">
            <summary>
            Creates a <see cref="T:System.IO.TextReader"/> over the command's standard error result.
            </summary>
            <returns>The <see cref="T:System.IO.TextReader"/>.</returns>
        </member>
        <member name="P:Neon.SSH.CommandResponse.AllText">
            <summary>
            Returns the command standard output and error as a string.
            </summary>
        </member>
        <member name="M:Neon.SSH.CommandResponse.OpenAllTextReader">
            <summary>
            Creates a <see cref="T:System.IO.TextReader"/> over the command's standard output and standard error results.
            </summary>
            <returns>The <see cref="T:System.IO.TextReader"/>.</returns>
        </member>
        <member name="P:Neon.SSH.CommandResponse.OutputBinary">
            <summary>
            Returns the command standard output as a byte array when <see cref="F:Neon.SSH.RunOptions.BinaryOutput"/> 
            is specified.
            </summary>
        </member>
        <member name="M:Neon.SSH.CommandResponse.OpenOutputBinaryStream">
            <summary>
            Creates a <see cref="T:System.IO.Stream"/> that can be used to read the standard output as binary when 
            <see cref="F:Neon.SSH.RunOptions.BinaryOutput"/> is specified.
            </summary>
            <returns>The <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="P:Neon.SSH.CommandResponse.ErrorSummary">
            <summary>
            Returns an error message suitable for including in a related exception message.
            </summary>
        </member>
        <member name="M:Neon.SSH.CommandResponse.ToBash(System.String)">
            <summary>
            Converts the original command into a Bash command.
            </summary>
            <param name="comment">Optionally specifies a comment string to be included.</param>
            <returns>The Bash command string.</returns>
        </member>
        <member name="M:Neon.SSH.CommandResponse.EnsureSuccess">
            <summary>
            Ensures that the response has a zero exit code.
            </summary>
            <returns>The same <see cref="T:Neon.SSH.CommandResponse"/> to support fluent coding styles.</returns>
            <exception cref="T:Neon.Common.ExecuteException">Thrown if when <see cref="P:Neon.SSH.CommandResponse.ExitCode"/> is non-zero.</exception>
        </member>
        <member name="T:Neon.SSH.HostFolders">
            <summary>
            Enumerates the paths of important directories on cluster 
            host servers.
            </summary>
            <remarks>
            <note>
            Although these constants are referenced by C# code, Linux scripts 
            are likely to hardcode these strings.  You should do a search and
            replace whenever you change any of these values.
            </note>
            <note>
            Changing any of these will likely break [NeonCLIENT] interactions
            with existing clusters that use the previous folder path.  Be
            ver sure you know what you're doing when you make changes.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.HostFolders.NeonHome(System.String)">
            <summary>
            Path to a user's <b>neon</b> home directory.
            </summary>
            <param name="username">The username.</param>
            <returns>The directory path.</returns>
        </member>
        <member name="M:Neon.SSH.HostFolders.Download(System.String)">
            <summary>
            Path to the user download directory.
            </summary>
            <param name="username">The username.</param>
            <returns>The directory path.</returns>
        </member>
        <member name="M:Neon.SSH.HostFolders.Exec(System.String)">
            <summary>
            The user folder where cluster tools can upload, unpack, and then
            execute <see cref="T:Neon.SSH.CommandBundle"/>s as well as store temporary
            command output files.
            </summary>
            <param name="username">The username.</param>
            <returns>The directory path.</returns>
        </member>
        <member name="M:Neon.SSH.HostFolders.Home(System.String)">
            <summary>
            Path to a user archive directory.
            </summary>
            <param name="username">The username.</param>
            <returns>The directory path.</returns>
        </member>
        <member name="F:Neon.SSH.HostFolders.Tmpfs">
            <summary>
            Root folder on the local tmpfs (shared memory) folder where 
            cluster will persist misc temporary files.
            </summary>
        </member>
        <member name="M:Neon.SSH.HostFolders.Upload(System.String)">
            <summary>
            Path to a user upload directory.
            </summary>
            <param name="username">The username.</param>
            <returns>The directory path.</returns>
        </member>
        <member name="T:Neon.SSH.IBashCommandFormatter">
            <summary>
            Describes a type implementation that can render a nicely formatted Bash command.
            </summary>
        </member>
        <member name="M:Neon.SSH.IBashCommandFormatter.ToBash(System.String)">
            <summary>
            Renders a nicely formatted Bash command.  Note that the string returned may
            include multipe lines with continuation characters.
            </summary>
            <param name="comment">The optional comment to be included in the output.</param>
            <returns>The formatted Bash command.</returns>
        </member>
        <member name="T:Neon.SSH.ILinuxSshProxy">
            <summary>
            Defines core methods and properties implemented by <see cref="T:Neon.SSH.LinuxSshProxy"/>.
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.OsName">
            <summary>
            <para>
            Returns the name of the remote operating system (e.g. "Ubuntu").
            </para>
            <note>
            This is only valid after a connection has been established.
            </note>
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.OsVersion">
            <summary>
            <para>
            Returns the version of the remote operating system (e.g. "18.04.1").
            </para>
            <note>
            This is only valid after a connection has been established.
            </note>
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.KernelVersion">
            <summary>
            <para>
            Returns the Linux kernel release version installed on the remote machine.
            </para>
            <note>
            <para>
            This currently assumes that the kernel versions returned by <b>uname -r</b>
            are formatted like:
            </para>
            <list type="bullet">
                <item>5.4.0</item>
                <item>5.4.0-66-generic</item>
                <item>5.4.72-microsoft-standard-WSL2</item>
            </list>
            <para>
            This property extracts the version (up to the first dash) and
            returns that and <see cref="P:Neon.SSH.ILinuxSshProxy.KernelRelease"/> includes the full
            release text.
            </para>
            </note>
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.KernelRelease">
            <summary>
            <para>
            Describes the Linux kernel release installed on the remote machine.
            </para>
            <note>
            <para>
            This currently assumes that the kernel versions returned by <b>uname -r</b>
            are formatted like:
            </para>
            <list type="bullet">
                <item>5.4.0</item>
                <item>5.4.0-66-generic</item>
                <item>5.4.72-microsoft-standard-WSL2</item>
            </list>
            <para>
            This property returns the full release string.  Use <see cref="P:Neon.SSH.ILinuxSshProxy.KernelVersion"/>
            if you just want the version.
            </para>
            </note>
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.Name">
            <summary>
            Returns the display name for the remote machine.
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.Address">
            <summary>
            The IP address to used for connecting to the remote machine.
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.SshPort">
            <summary>
            The SSH port.  This defaults to <b>22</b>.
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.ConnectTimeout">
            <summary>
            The connection attempt timeout.  This defaults to <b>5</b> seconds.
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.FileTimeout">
            <summary>
            The file operation timeout.  This defaults to <b>30</b> seconds.
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.RetryCount">
            <summary>
            The number of times to retry a failed remote command.  
            This defaults to <b>5</b>.
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.DefaultRunOptions">
            <summary>
            Specifies the default options to be bitwise ORed with any specific
            options passed to a run or sudo execution command when the <see cref="F:Neon.SSH.RunOptions.Defaults"/> 
            flag is specified.  This defaults to <see cref="F:Neon.SSH.RunOptions.None"/>.
            </summary>
            <remarks>
            Setting this is a good way to specify a global default for flags like <see cref="F:Neon.SSH.RunOptions.FaultOnError"/>.
            </remarks>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.RemotePath">
            <summary>
            The PATH to use on the remote machine when executing commands in the
            session or <c>null</c>/empty to run commands without a path.  This
            defaults to the standard Linux path.
            </summary>
            <remarks>
            <note>
            When you modify this, be sure to use a colon (<b>:</b>) to separate 
            multiple directories as required.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.Username">
            <summary>
            Returns the username used to log into the remote node.
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.Status">
            <summary>
            The current remote machine status.
            </summary>
            <remarks>
            <para>
            This property is intended to be used by management tools to indicate the state
            of the remote machine for UX purposes.  This property will be set by some methods such
            as <see cref="M:Neon.SSH.ILinuxSshProxy.WaitForBoot(System.Nullable{System.TimeSpan})"/> but can also be set explicitly by tools when they
            have an operation in progress on the remote machine.
            </para>
            <note>
            This will return a variation of <b>*** FAULTED ***</b> if <see cref="P:Neon.SSH.ILinuxSshProxy.IsFaulted"/>=<c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.IsInvolved">
            <summary>
            Used to indicate that the remote machine will be involved in a configuration step.  
            This property is a bit of a hack used when displaying the status of a NeonKUBE cluster setup.
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.IsConfiguring">
            <summary>
            Used to indicate that the remote machine is actively being being configured.  This property is 
            a bit of a hack used when displaying the status of a NeonKUBE cluster setup.
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.IsReady">
            <summary>
            Indicates that the remote machine has completed or has failed the current set of operations.  
            This property is a bit of a hack used when displaying the status of a NeonKUBE cluster setup.
            </summary>
            <remarks>
            <note>
            This will always return <c>false</c> if the remote machine when <see cref="P:Neon.SSH.ILinuxSshProxy.IsFaulted"/>=<c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.IsFaulted">
            <summary>
            Indicates that the remote machine is in a faulted state because one or more operations
            have failed.  This property is a bit of a hack used when displaying the status of a NeonKUBE
            cluster setup.
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.HomeFolderPath">
            <summary>
            Returns the path to the user's home folder on the remote machine.
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.DownloadFolderPath">
            <summary>
            Returns the path to the user's download folder on the remote machine.
            </summary>
        </member>
        <member name="P:Neon.SSH.ILinuxSshProxy.UploadFolderPath">
            <summary>
            Returns the path to the user's upload folder on the remote machine.
            </summary>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.Disconnect">
            <summary>
            Closes any open connections to the Linux remote machine but leaves open the
            opportunity to reconnect later.
            </summary>
            <remarks>
            <note>
            This is similar to <see cref="M:System.IDisposable.Dispose"/> but dispose does
            not allow reconnection.
            </note>
            <para>
            This command is useful situations where the client application may temporarily
            lose contact with the remote machine if for example, when it is rebooted or the network
            configuration changes.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.UpdateCredentials(Neon.SSH.SshCredentials)">
            <summary>
            Updates the proxy credentials.  Call this whenever you change the
            password or SSH certificate for the user account we're using for the
            current proxy connection.  This ensures that the proxy will be able
            to reconnect to the service when required.
            </summary>
            <param name="newCredentials">The new credentials.</param>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.DisableSudoPrompt(System.String)">
            <summary>
            <para>
            Prevents <b>sudo</b> from prompting for passwords and also ensures that
            the <b>/home/root</b> directory exists and has the appropriate permissions.
            </para>
            <note>
            The connected user must already be a member of the <b>root</b> group.
            </note>
            <note>
            You do not need to call <see cref="M:Neon.SSH.ILinuxSshProxy.Connect(System.TimeSpan)"/> or <see cref="M:Neon.SSH.ILinuxSshProxy.WaitForBoot(System.Nullable{System.TimeSpan})"/>
            before calling this method (in fact, calling those methods will probably fail).
            </note>
            </summary>
            <param name="password">The current user's password.</param>
            <remarks>
            <para>
            This method uses the existence of a file at <b>/etc/neon-sshproxy-init</b>
            file to ensure that it only executes once per machine.  This file will be
            created the first time this method is called on the machine.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.Shutdown">
            <summary>
            Shutdown the remote machine.
            </summary>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.Reboot(System.Boolean)">
            <summary>
            Reboot the remote machine.
            </summary>
            <param name="wait">Optionally waits for the remote machine to reboot and then reconnects (defaults to <c>true</c>).</param>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.Log(System.String)">
            <summary>
            Writes text to the operation log.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.LogLine(System.String)">
            <summary>
            Writes a line of text to the operation log.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.LogFlush">
            <summary>
            Flushes the log.
            </summary>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.LogException(System.Exception)">
            <summary>
            Writes exception information to the operation log.
            </summary>
            <param name="e">The exception.</param>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.LogException(System.String,System.Exception)">
            <summary>
            Writes exception information to the operation log.
            </summary>
            <param name="message">The operation details.</param>
            <param name="e">The exception.</param>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.Fault(System.String)">
            <summary>
            Puts the node proxy into the faulted state.
            </summary>
            <param name="message">The optional message to be logged.</param>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.Connect(System.TimeSpan)">
            <summary>
            Establishes a connection to the remote machine, disconnecting first if the proxy is already connected.
            </summary>
            <param name="timeout">Maximum amount of time to wait for a connection (defaults to <see cref="P:Neon.SSH.ILinuxSshProxy.ConnectTimeout"/>).</param>
            <exception cref="T:Neon.SSH.SshProxyException">
            Thrown if the host hasn't been prepared yet and the SSH connection credentials are not username/password
            or if there's problem with low-level host configuration.
            </exception>
            <remarks>
            <note>
            The first time a connection is established is called on a particular host, password credentials 
            must be used so that low-level <b>sudo</b> configuration can be performed.  Subsequent connections
            can use TLS certificates.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.WaitForBoot(System.Nullable{System.TimeSpan})">
            <summary>
            Waits for the remote machine to boot by continuously attempting to establish a SSH session.
            </summary>
            <param name="timeout">The operation timeout (defaults to <b>10 minutes</b>).</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Neon.SSH.SshProxyException">
            Thrown if the host hasn't been prepared yet and the SSH connection credentials are not username/password
            or if there's problem with low-level host configuration.
            </exception>
            <remarks>
            <note>
            The first time a connection is established is called on a particular host, password credentials 
            must be used so that low-level <b>sudo</b> configuration can be performed.  Subsequent connections
            can use TLS certificates.
            </note>
            <para>
            The method will attempt to connect to the remote machine every 10 seconds up to the specified
            timeout.  If it is unable to connect during this time, the exception thrown by the
            SSH client will be rethrown.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.CloneSshClient">
            <summary>
            <para>
            Creates and returns a clone of a low-level <see cref="T:Renci.SshNet.SshClient"/> to 
            the remote endpoint.
            </para>
            <note>
            The caller is responsible for disposing the returned instance.
            </note>
            </summary>
            <returns>The cloned client.</returns>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.CloneScpClient">
            <summary>
            <para>
            Creates and returns a clone of a low-level <see cref="T:Renci.SshNet.ScpClient"/> to 
            the remote endpoint.
            </para>
            <note>
            The caller is responsible for disposing the returned instance.
            </note>
            </summary>
            <returns>The cloned client.</returns>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.RemoveFile(System.String)">
            <summary>
            Removes a file on the server if it exists.
            </summary>
            <param name="target">The path to the target file.</param>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.Download(System.String,System.IO.Stream)">
            <summary>
            Downloads a file from the Linux server and writes it out a stream.
            </summary>
            <param name="source">The source path of the file on the Linux server.</param>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.DownloadBytes(System.String)">
            <summary>
            Downloads a file as bytes from the Linux server .
            </summary>
            <param name="source">The source path of the file on the Linux server.</param>
            <returns>The file contents as UTF8 text.</returns>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.DownloadText(System.String)">
            <summary>
            Downloads a file as text from the Linux server.
            </summary>
            <param name="source">The source path of the file on the Linux server.</param>
            <returns>The file contents as UTF8 text.</returns>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.DirectoryExists(System.String)">
            <summary>
            Determines whether a directory exists on the remote server.
            </summary>
            <param name="path">The directory path.</param>
            <returns><c>true</c> if the directory exists.</returns>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory if it exists.
            </summary>
            <param name="path">The directory path.</param>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.FileExists(System.String)">
            <summary>
            Determines whether a file exists on the remote server.
            </summary>
            <param name="path">The file path.</param>
            <returns><c>true</c> if the file exists.</returns>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.DeleteFile(System.String)">
            <summary>
            Deletes the file if it exists.
            </summary>
            <param name="path">The file path.</param>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.Upload(System.String,System.IO.Stream,System.String,System.String,System.Boolean)">
            <summary>
            Uploads a binary stream to the Linux server and then writes it to the file system.
            </summary>
            <param name="target">The target path on the Linux server.</param>
            <param name="input">The input stream.</param>
            <param name="permissions">Optionally specifies the file permissions (must be <c>chmod</c> compatible).</param>
            <param name="owner">Optionally specifies the file owner (must be <c>chown</c> compatible).</param>
            <param name="userPermissions">
            Optionally indicates that the operation should be performed with user-level permissions
            rather than <b>sudo</b>, which is the default.
            </param>
            <remarks>
            <note>
            <para>
            <b>Implementation Note:</b> The SSH.NET library we're using does not allow for
            files to be uploaded directly to arbitrary file system locations, even if the
            logged-in user has admin permissions.  The problem is that SSH.NET does not
            provide a way to use <b>sudo</b> to claim these higher permissions.
            </para>
            <para>
            The workaround is to create an upload folder in the user's home directory
            called <b>~/upload</b> and upload the file there first and then use SSH
            to move the file to its target location under sudo.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.UploadBytes(System.String,System.Byte[])">
            <summary>
            Uploads a byte array to a Linux server file.
            </summary>
            <param name="target">The target path of the file on the Linux server.</param>
            <param name="bytes">The bytes to be uploaded.</param>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.UploadText(System.String,System.IO.Stream,System.Int32,System.Text.Encoding,System.Text.Encoding,System.String,System.String)">
            <summary>
            Uploads a text stream to the Linux server and then writes it to the file system,
            converting any CR-LF line endings to the Unix-style LF.
            </summary>
            <param name="target">The target path on the Linux server.</param>
            <param name="textStream">The input stream.</param>
            <param name="tabStop">
            Optionally expands TABs into spaces when greater than zero or converts 
            a series of leading spaces into tabs if less than zero.
            </param>
            <param name="inputEncoding">Optionally specifies the input text encoding (defaults to UTF-8).</param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies the file permissions (must be <c>chmod</c> compatible).</param>
            <param name="owner">Optionally specifies the file owner (must be <c>chown</c> compatible).</param>
            <remarks>
            <note>
            Any Unicode Byte Order Marker (BOM) at start of the input stream will be removed.
            </note>
            <note>
            <para>
            <b>Implementation Note:</b> The SSH.NET library we're using does not allow for
            files to be uploaded directly to arbitrary file system locations, even if the
            logged-in user has admin permissions.  The problem is that SSH.NET does not
            provide a way to use <b>sudo</b> to claim these higher permissions.
            </para>
            <para>
            The workaround is to create an upload folder in the user's home directory
            called <b>~/upload</b> and upload the file there first and then use SSH
            to move the file to its target location under sudo.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.UploadText(System.String,System.String,System.Int32,System.Text.Encoding,System.String,System.String)">
            <summary>
            Uploads a text string to the Linux server and then writes it to the file system,
            converting any CR-LF line endings to the Unix-style LF.
            </summary>
            <param name="target">The target path on the Linux server.</param>
            <param name="text">The input text.</param>
            <param name="tabStop">
            Optionally expands TABs into spaces when greater than zero or converts 
            a series of leading spaces into tabs if less than zero.
            </param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies the file permissions (must be <c>chmod</c> compatible).</param>
            <param name="owner">Optionally specifies the file owner (must be <c>chown</c> compatible).</param>
            <remarks>
            <note>
            <para>
            <b>Implementation Note:</b> The SSH.NET library we're using does not allow for
            files to be uploaded directly to arbitrary file system locations, even if the
            logged-in user has admin permissions.  The problem is that SSH.NET does not
            provide a way to use <b>sudo</b> to claim these higher permissions.
            </para>
            <para>
            The workaround is to create an upload folder in the user's home directory
            called <b>~/upload</b> and upload the file there first and then use SSH
            to move the file to its target location under sudo.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.UploadText(System.String,System.Text.StringBuilder,System.Int32,System.Text.Encoding,System.String,System.String)">
            <summary>
            Uploads text from a <see cref="T:System.Text.StringBuilder"/> to the Linux server and then writes it to the file system,
            converting any CR-LF line endings to the Unix-style LF.
            </summary>
            <param name="target">The target path on the Linux server.</param>
            <param name="text">The input text.</param>
            <param name="tabStop">
            Optionally expands TABs into spaces when greater than zero or converts 
            a series of leading spaces into tabs if less than zero.
            </param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies the file permissions (must be <c>chmod</c> compatible).</param>
            <param name="owner">Optionally specifies the file owner (must be <c>chown</c> compatible).</param>
            <remarks>
            <note>
            <para>
            <b>Implementation Note:</b> The SSH.NET library we're using does not allow for
            files to be uploaded directly to arbitrary file system locations, even if the
            logged-in user has admin permissions.  The problem is that SSH.NET does not
            provide a way to use <b>sudo</b> to claim these higher permissions.
            </para>
            <para>
            The workaround is to create an upload folder in the user's home directory
            called <b>~/upload</b> and upload the file there first and then use SSH
            to move the file to its target location under sudo.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.Download(System.String,System.String)">
            <summary>
            Downloads a file from the remote node to the local file computer, creating
            parent folders as necessary.
            </summary>
            <param name="source">The source path on the Linux server.</param>
            <param name="target">The target path on the local computer.</param>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.RunCommand(System.String,System.Object[])">
            <summary>
            Runs a shell command on the Linux server.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.SSH.CommandResponse"/>.</returns>
            <remarks>
            <para>
            This method uses <see cref="P:Neon.SSH.ILinuxSshProxy.DefaultRunOptions"/> when executing the command.
            </para>
            <para>
            You can override this behavior by passing an <see cref="T:Neon.SSH.RunOptions"/> to
            the <see cref="M:Neon.SSH.ILinuxSshProxy.RunCommand(System.String,Neon.SSH.RunOptions,System.Object[])"/> override.
            </para>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.RunCommand(System.String,Neon.SSH.RunOptions,System.Object[])">
            <summary>
            Runs a shell command on the Linux server with <see cref="T:Neon.SSH.RunOptions"/>.
            </summary>
            <param name="command">The command.</param>
            <param name="runOptions">The execution options.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.SSH.CommandResponse"/>.</returns>
            <exception cref="T:Neon.SSH.RemoteCommandException">
            Thrown if the command returned a non-zero exit code and 
            <see cref="F:Neon.SSH.RunOptions.FaultOnError"/> was passed.
            </exception>
            <remarks>
            <note>
            <para>
            <paramref name="command"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.SSH.CommandBundle"/> instead.
            </para>
            <para>
            Commands may not longer than <see cref="F:Neon.SSH.LinuxSshProxy.MaxCommandLength"/> characters.
            Note that the command length includes the string passed as well as an additional
            internal command configuring the PATH.
            </para>
            </note>
            <note>
            Any <c>null</c> arguments will be ignore
            </note>
            <para>
            The <paramref name="runOptions"/> flags control how this command functions.
            If <see cref="F:Neon.SSH.RunOptions.FaultOnError"/> is set, then commands that return
            a non-zero exit code will put the server into the faulted state by setting
            <see cref="P:Neon.SSH.ILinuxSshProxy.IsFaulted"/>=<c>true</c> and throwing a <see cref="T:Neon.SSH.RemoteCommandException"/>.
            This means that <see cref="P:Neon.SSH.ILinuxSshProxy.IsReady"/> will  always return <c>false</c> 
            afterwards and subsequent calls to <see cref="M:Neon.SSH.ILinuxSshProxy.RunCommand(System.String,System.Object[])"/>
            and <see cref="M:Neon.SSH.ILinuxSshProxy.SudoCommand(System.String,System.Object[])"/> will be ignored unless 
            <see cref="F:Neon.SSH.RunOptions.RunWhenFaulted"/> is passed with the future command. 
            <see cref="F:Neon.SSH.RunOptions.LogOnErrorOnly"/> indicates that command output should
            be logged only for non-zero exit codes.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.RunCommand(Neon.SSH.CommandBundle,Neon.SSH.RunOptions)">
            <summary>
            Runs a <see cref="T:Neon.SSH.CommandBundle"/> with user permissions on the remote machine.
            </summary>
            <param name="bundle">The bundle.</param>
            <param name="runOptions">The execution options (defaults to <see cref="F:Neon.SSH.RunOptions.Defaults"/>).</param>
            <returns>The <see cref="T:Neon.SSH.CommandResponse"/>.</returns>
            <remarks>
            <para>
            This method is intended for situations where one or more files need to be uploaded to a cluster node 
            and then be used when a command is executed.
            </para>
            <para>
            To use this class, construct an instance passing the command and arguments to be executed.  The command be 
            an absolute reference to an executable in folders such as <b>/bin</b> or <b>/usr/local/bin</b>, an executable
            somewhere on the current PATH, or relative to the files unpacked from the bundle.  The current working directory
            will be set to the folder where the bundle was unpacked, so you can reference local executables like
            <b>./MyExecutable</b>.
            </para>
            <para>
            Once a bundle is constructed, you will add <see cref="T:Neon.SSH.CommandFile"/> instances specifying the
            file data you want to include.  These include the relative path to the file to be uploaded as well
            as its text or binary data.  You may also indicate whether each file is to be marked as executable.
            </para>
            <note>
            <paramref name="runOptions"/> is set to <see cref="F:Neon.SSH.RunOptions.Defaults"/> by default.  This means
            that the flags specified by <see cref="P:Neon.SSH.ILinuxSshProxy.DefaultRunOptions"/> will be be used.  This is a 
            good way to specify a global default for flags like <see cref="F:Neon.SSH.RunOptions.FaultOnError"/>.
            </note>
            <note>
            This command requires that the <b>unzip</b> package be installed on the host.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.SudoCommand(System.String,System.Object[])">
            <summary>
            Runs a shell command on the Linux server under <b>sudo</b>.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.SSH.CommandResponse"/>.</returns>
            <remarks>
            <note>
            <para>
            <paramref name="command"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.SSH.CommandBundle"/> instead.
            </para>
            <para>
            Commands may not longer than <see cref="F:Neon.SSH.LinuxSshProxy.MaxCommandLength"/> characters.
            Note that the command length includes the string passed as well as an additional
            internal command configuring the PATH.
            </para>
            </note>
            <para>
            This method uses the <see cref="P:Neon.SSH.ILinuxSshProxy.DefaultRunOptions"/> when executing the command.
            </para>
            <para>
            You can override this behavior by passing an <see cref="T:Neon.SSH.RunOptions"/> to
            the <see cref="M:Neon.SSH.ILinuxSshProxy.RunCommand(System.String,Neon.SSH.RunOptions,System.Object[])"/> override.
            </para>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.SudoCommand(System.String,Neon.SSH.RunOptions,System.Object[])">
            <summary>
            Runs a shell command on the Linux server under <b>sudo</b> with <see cref="T:Neon.SSH.RunOptions"/>.
            </summary>
            <param name="command">The command.</param>
            <param name="runOptions">The execution options.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.SSH.CommandResponse"/>.</returns>
            <remarks>
            <note>
            <para>
            <paramref name="command"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.SSH.CommandBundle"/> instead.
            </para>
            <para>
            Commands may not longer than <see cref="F:Neon.SSH.LinuxSshProxy.MaxCommandLength"/> characters.
            Note that the command length includes the string passed as well as an additional
            internal command configuring the PATH.
            </para>
            </note>
            <para>
            The <paramref name="runOptions"/> flags control how this command functions.
            If <see cref="F:Neon.SSH.RunOptions.FaultOnError"/> is set, then commands that return
            a non-zero exit code will put the server into the faulted state by setting
            <see cref="P:Neon.SSH.ILinuxSshProxy.IsFaulted"/>=<c>true</c>.  This means that <see cref="P:Neon.SSH.ILinuxSshProxy.IsReady"/> will 
            always return <c>false</c> afterwards and subsequent command executions will be 
            ignored unless  <see cref="F:Neon.SSH.RunOptions.RunWhenFaulted"/> is specified for the 
            future command.
            </para>
            <para>
            <see cref="F:Neon.SSH.RunOptions.LogOnErrorOnly"/> indicates that command output should
            be logged only for non-zero exit codes.
            </para>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.SudoCommandAsUser(System.String,System.String,System.Object[])">
            <summary>
            Runs a shell command on the Linux server under <b>sudo</b> as a specific user.
            </summary>
            <param name="user">The username.</param>
            <param name="command">The command.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.SSH.CommandResponse"/>.</returns>
            <remarks>
            <note>
            <para>
            <paramref name="command"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.SSH.CommandBundle"/> instead.
            </para>
            <para>
            Commands may not longer than <see cref="F:Neon.SSH.LinuxSshProxy.MaxCommandLength"/> characters.
            Note that the command length includes the string passed as well as an additional
            internal command configuring the PATH.
            </para>
            </note>
            <para>
            This method uses the <see cref="P:Neon.SSH.ILinuxSshProxy.DefaultRunOptions"/> when executing the command.
            </para>
            <para>
            You can override this behavior by passing an <see cref="T:Neon.SSH.RunOptions"/> to
            the <see cref="M:Neon.SSH.ILinuxSshProxy.RunCommand(System.String,Neon.SSH.RunOptions,System.Object[])"/> override.
            </para>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.SudoCommandAsUser(System.String,System.String,Neon.SSH.RunOptions,System.Object[])">
            <summary>
            Runs a shell command on the Linux server under <b>sudo</b> as a specific user
            and with <see cref="T:Neon.SSH.RunOptions"/>.
            </summary>
            <param name="user">The username.</param>
            <param name="command">The command.</param>
            <param name="runOptions">The execution options.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.SSH.CommandResponse"/>.</returns>
            <remarks>
            <note>
            <para>
            <paramref name="command"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.SSH.CommandBundle"/> instead.
            </para>
            <para>
            Commands may not longer than <see cref="F:Neon.SSH.LinuxSshProxy.MaxCommandLength"/> characters.
            Note that the command length includes the string passed as well as an additional
            internal command configuring the PATH.
            </para>
            </note>
            <para>
            The <paramref name="runOptions"/> flags control how this command functions.
            If <see cref="F:Neon.SSH.RunOptions.FaultOnError"/> is set, then commands that return
            a non-zero exit code will put the server into the faulted state by setting
            <see cref="P:Neon.SSH.ILinuxSshProxy.IsFaulted"/>=<c>true</c>.  This means that <see cref="P:Neon.SSH.ILinuxSshProxy.IsReady"/> will 
            always return <c>false</c> afterwards and subsequent command executions will be 
            ignored unless  <see cref="F:Neon.SSH.RunOptions.RunWhenFaulted"/> is specified for the 
            future command.
            </para>
            <para>
            <see cref="F:Neon.SSH.RunOptions.LogOnErrorOnly"/> indicates that command output should
            be logged only for non-zero exit codes.
            </para>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.SudoCommand(Neon.SSH.CommandBundle,Neon.SSH.RunOptions)">
            <summary>
            Runs a <see cref="T:Neon.SSH.CommandBundle"/> under <b>sudo</b> on the remote machine.
            </summary>
            <param name="bundle">The bundle.</param>
            <param name="runOptions">The execution options (defaults to <see cref="F:Neon.SSH.RunOptions.Defaults"/>).</param>
            <returns>The <see cref="T:Neon.SSH.CommandResponse"/>.</returns>
            <remarks>
            <para>
            This method is intended for situations where one or more files need to be uploaded to a cluster node 
            and then be used when a command is executed.
            </para>
            <para>
            To use this class, construct an instance passing the command and arguments to be executed.  The command be 
            an absolute reference to an executable in folders such as <b>/bin</b> or <b>/usr/local/bin</b>, an executable
            somewhere on the current PATH, or relative to the files unpacked from the bundle.  The current working directory
            will be set to the folder where the bundle was unpacked, so you can reference local executables like
            <b>./MyExecutable</b>.
            </para>
            <para>
            Once a bundle is constructed, you will add <see cref="T:Neon.SSH.CommandFile"/> instances specifying the
            file data you want to include.  These include the relative path to the file to be uploaded as well
            as its text or binary data.  You may also indicate whether each file is to be marked as executable.
            </para>
            <note>
            <paramref name="runOptions"/> is set to <see cref="F:Neon.SSH.RunOptions.Defaults"/> by default.  This means
            that the flags specified by <see cref="P:Neon.SSH.ILinuxSshProxy.DefaultRunOptions"/> will be be used.  This is a 
            good way to specify a global default for flags like <see cref="F:Neon.SSH.RunOptions.FaultOnError"/>.
            </note>
            <note>
            This command requires that the <b>unzip</b> package be installed on the host.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.GetNetworkInterface(System.Net.IPAddress)">
            <summary>
            Returns the name of the network interface assigned to a specific IP address.
            </summary>
            <param name="address">The target IP address.</param>
            <returns>The network interface name.</returns>
            <exception cref="T:Neon.SSH.SshProxyException">Thrown if the interface was not found.</exception>
            <remarks>
            <para>
            In the olden days, network devices were assigned names like <b>eth0</b>,
            <b>eth1</b>,... during boot somewhat randomly and there was no guarantee
            that the same assignments would be made on subsequent server restarts.
            </para>
            <para>
            Modern Linux systems generate predictable network interfaces names during
            boot by enumerating the physical devices installed and generating device
            names based on the topology of the system (e.g. slots, channels,...).
            This is discussed <a href="https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/">here</a>.
            </para>
            <note>
            Cloud environments as well as environments where nodes hosted on hypervisors 
            like Hyper-V or XenServer will still assign interface names like <b>eth0</b>...
            This method will still work for these environments.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.GetTimeUtc">
            <summary>
            Returns the current time (UTC) on the remote machine.
            </summary>
            <returns>The machine's current <see cref="T:System.DateTime"/> (UTC).</returns>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.ListDisks(System.Boolean)">
            <summary>
            Lists information about the disks on the remote machine.
            </summary>
            <param name="fixedDisksOnly">
            Optionally specifies that non-fixed disks should be returned as well 
            (defaults to <c>true</c>).
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> relating the case sensitive 
            disk name to a <see cref="T:Neon.SSH.LinuxDiskInfo"/> including information
            on the disk partitions.
            </returns>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.ListUnpartitionedDisks">
            <summary>
            Returns the names of any unpartitioned disks (excluding floppy disks).
            </summary>
            <returns>The names of the unpartitioned disks.</returns>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.ListPartitionedDisks">
            <summary>
            Returns the names of any partitioned disks (excluding floppy disks).
            </summary>
            <returns>The names of the unpartitioned disks.</returns>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.KubectlApply(System.String,Neon.SSH.RunOptions)">
            <summary>
            Uses <c>kubectl apply -f</c> to apply a YAML file.
            </summary>
            <param name="yaml">The YAML file contents.</param>
            <param name="runOptions">Optional <see cref="T:Neon.SSH.RunOptions"/>.</param>
            <returns>The <see cref="T:Neon.SSH.CommandResponse"/>.</returns>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.KubeCtlApply(System.Text.StringBuilder,Neon.SSH.RunOptions)">
            <summary>
            Uses <c>kubectl apply -f</c> to apply a YAML file.
            </summary>
            <param name="sbYaml">The YAML file contents.</param>
            <param name="runOptions">Optional <see cref="T:Neon.SSH.RunOptions"/>.</param>
            <returns>The <see cref="T:Neon.SSH.CommandResponse"/>.</returns>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.GetNeonInitStatus">
            <summary>
            <para>
            Returns an indication of whether the <b>neon-init</b> service has been executed
            on the remote machine.  This service is deployed to NeonKUBE cluster nodes to
            act as a poor-man's <b>cloud-init</b> used to configure the network and credentials 
            by mounting a virual ISO drive with a configuration script for non-cloud environments.
            </para>
            <note>
            The <b>neon-init</b> service disables itself after running for the first time.
            You'll need to call <see cref="M:Neon.SSH.ILinuxSshProxy.SetNeonInitStatus(System.Boolean,System.Boolean)"/> passing <c>false</c>
            the re-enable this service when required.
            </note>
            </summary>
            <returns><c>true</c> if <b>neon-init</b> has been executed.</returns>
        </member>
        <member name="M:Neon.SSH.ILinuxSshProxy.SetNeonInitStatus(System.Boolean,System.Boolean)">
            <summary>
            <para>
            Manually sets the <b>neon-init</b> service execution status. 
            </para>
            <para>
            The <b>neon-init</b> service is deployed to NeonKUBE cluster nodes to act
            as a poor-man's <b>cloud-init</b> to configure the network and credentials 
            by mounting a virual ISO drive with a configuration script for non-cloud 
            environments.
            </para>
            <para>
            Calling this with <c>true</c> will prevent the <b>neon-init</b> service from
            looking for a mounted ISO on next boot and executing the special script  there.
            Calling this with <c>false</c> will re-enable the <b>neon-init</b> service
            when the machine is rebooted.
            </para>
            <note>
            The <b>neon-init</b> service disables itself after running for the first time.
            You'll need to call <see cref="M:Neon.SSH.ILinuxSshProxy.SetNeonInitStatus(System.Boolean,System.Boolean)"/> passing <c>false</c>
            the re-enable this service when required.
            </note>
            </summary>
            <param name="initialized">
            Pass <c>true</c> to indicate that the <b>neon-init</b> service has been executed, 
            <c>false</c> to clear the status.
            </param>
            <param name="keepNetworkSettings">
            Optionally retains the static network settings when <paramref name="initialized"/> is
            passed as <c>false</c>, otherwise the original (probably DHCP) settings will be restored.
            </param>
        </member>
        <member name="T:Neon.SSH.LinuxDiskInfo">
            <summary>
            Holds information about a Linux disk and its partitions.
            </summary>
        </member>
        <member name="M:Neon.SSH.LinuxDiskInfo.#ctor(System.String,System.Int64,System.Boolean,System.Boolean,System.Collections.Generic.List{Neon.SSH.LinuxDiskPartition})">
            <summary>
            Constructor.
            </summary>
            <param name="diskName">The disk name.</param>
            <param name="size">The disk size in bytes.</param>
            <param name="isReadonly">Indicates whether the disk is removable.</param>
            <param name="isRemovable">Indicates whether the disk is read-only.</param>
            <param name="partitions">The disk partitions or <c>null</c>.</param>
        </member>
        <member name="P:Neon.SSH.LinuxDiskInfo.DiskName">
            <summary>
            Returns the disk name.
            </summary>
        </member>
        <member name="P:Neon.SSH.LinuxDiskInfo.Size">
            <summary>
            Disk size in bytes.
            </summary>
        </member>
        <member name="P:Neon.SSH.LinuxDiskInfo.IsRemovable">
            <summary>
            Indicates whether the disk is removable.
            </summary>
        </member>
        <member name="P:Neon.SSH.LinuxDiskInfo.IsReadOnly">
            <summary>
            Indicates whether the disk is read-only.
            </summary>
        </member>
        <member name="P:Neon.SSH.LinuxDiskInfo.Partitions">
            <summary>
            Returns the the disk partitions.
            </summary>
        </member>
        <member name="T:Neon.SSH.LinuxDiskPartition">
            <summary>
            Holds information about a Linux disk partition.
            </summary>
        </member>
        <member name="M:Neon.SSH.LinuxDiskPartition.#ctor(System.Int32,System.String,System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="partition">The partition number.</param>
            <param name="partitionName">The partition name.</param>
            <param name="partitionSize">The partition size in bytes.</param>
        </member>
        <member name="P:Neon.SSH.LinuxDiskPartition.Partition">
            <summary>
            Returns the partition number (1..4).
            </summary>
        </member>
        <member name="P:Neon.SSH.LinuxDiskPartition.PartitionName">
            <summary>
            Returns the partition name.
            </summary>
        </member>
        <member name="P:Neon.SSH.LinuxDiskPartition.PartitionSize">
            <summary>
            Returns the partition size in bytes.
            </summary>
        </member>
        <member name="T:Neon.SSH.LinuxSshProxy">
            <summary>
            <para>
            Uses a SSH/SCP connection to provide access to Linux machines to access
            files, run commands, etc.
            </para>
            <note>
            <b>IMPORTANT:</b> We use this class to manage Ubuntu Linux machines.  This 
            will likely work for Debian and other Debian based distros but other distros 
            like Alpine and Red Hat may have problems or may not work at all.
            </note>
            </summary>
            <remarks>
            <para>
            This class includes methods to invoke Linux commands on the node,
            </para>
            <para>
            Call <see cref="M:Neon.SSH.LinuxSshProxy.Dispose"/> or <see cref="M:Neon.SSH.LinuxSshProxy.Disconnect"/> to close the connection.
            </para>
            <note>
            You can use <see cref="M:Neon.SSH.LinuxSshProxy.Clone"/> to make a copy of a proxy that can be
            used to perform parallel operations against the same machine.
            </note>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="F:Neon.SSH.LinuxSshProxy.SshProxyInitPath">
            <summary>
            Path to the file whose existence indicates that the proxy has already 
            configured things like disabling SUDO password prompts.
            </summary>
        </member>
        <member name="F:Neon.SSH.LinuxSshProxy.connectLocks">
            <summary>
            Used to ensure that only one SSH.NET connection attempt will be inflight
            at the same time to the same target computer.
            </summary>
        </member>
        <member name="F:Neon.SSH.LinuxSshProxy.MaxCommandLength">
            <summary>
            <para>
            Specifies the maximum length of command strings passed to the non-bundle
            </para>
            <note>
            Note that the command length includes the user's string passed as well as
            an additional internal command configuring the PATH.
            </note>
            <c>RunCommand()</c> and <c>SudoCommand()</c> methods.
            </summary>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.GetConnectLock(System.String)">
            <summary>
            Returns the object to be used to when establishing connections to
            a target server.
            </summary>
            <param name="host">The target server hostname or IP address.</param>
            <returns>The lock object.</returns>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.#ctor(System.String,System.Net.IPAddress,Neon.SSH.SshCredentials,System.Int32,System.IO.TextWriter)">
            <summary>
            Constructs a <see cref="T:Neon.SSH.LinuxSshProxy`1"/>.
            </summary>
            <param name="name">The display name for the remote machine.</param>
            <param name="address">The private cluster IP address for the remote machine.</param>
            <param name="credentials">The credentials to be used for establishing SSH connections.</param>
            <param name="port">Optionally overrides the standard SSH port (22).</param>
            <param name="logWriter">The optional <see cref="T:System.IO.TextWriter"/> where operation logs will be written.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="name"/> or if <paramref name="credentials"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.Dispose">
            <summary>
            Releases all associated resources (e.g. any open remote machine connections).
            </summary>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.Dispose(System.Boolean)">
            <summary>
            Releases all associated resources (e.g. any open remote machine connections).
            </summary>
            <param name="disposing">Pass <c>true</c> if we're disposing, <c>false</c> if we're finalizing.</param>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.Clone">
            <summary>
            <para>
            Returns a clone of the SSH proxy.  This can be useful for situations where you
            need to be able to perform multiple SSH/SCP operations against the same
            machine in parallel.
            </para>
            <note>
            This does not clone any attached log writer.
            </note>
            </summary>
            <returns>The cloned <see cref="T:Neon.SSH.LinuxSshProxy`1"/>.</returns>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.CloneTo(Neon.SSH.LinuxSshProxy)">
            <summary>
            Used by derived classes to copy the base class state to a new
            instance as well as configure the new connection's SSH and SCP
            clients.
            </summary>
            <param name="target">The target proxy.</param>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.OsName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.OsVersion">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.KernelVersion">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.KernelRelease">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.Name">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.Address">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.SshPort">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.ConnectTimeout">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.FileTimeout">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.RetryCount">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.DefaultRunOptions">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.RemotePath">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.Username">
            <summary>
            Returns the username used to log into the remote node.
            </summary>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.Status">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.IsInvolved">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.IsConfiguring">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.IsReady">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.IsFaulted">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.HomeFolderPath">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.DownloadFolderPath">
            <inheritdoc/>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy.UploadFolderPath">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.Disconnect">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.InternalSshDisconnect">
            <summary>
            Disconnects the SSH client.
            </summary>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.InternalScpDisconnect">
            <summary>
            Disconnects the SCP client.
            </summary>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.DeadlockBreaker(System.String,System.Action,System.TimeSpan)">
            <summary>
            Performs an action on a new thread, killing the thread if it hasn't
            terminated within the specified timeout.
            </summary>
            <param name="actionName">Idenfies the action for logging purposes.</param>
            <param name="action">The action to be performed.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.UpdateCredentials(Neon.SSH.SshCredentials)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.GetAuthenticationMethod(Neon.SSH.SshCredentials)">
            <summary>
            Extracts the authentication method from SSH credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>The <see cref="T:Renci.SshNet.AuthenticationMethod"/>.</returns>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.DisableSudoPrompt(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.Shutdown">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.Reboot(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.UpdateRootCertificates(System.String)">
            <summary>
            Checks for and installs any new root certificates.
            </summary>
            <param name="aptGetTool">Optionally specifies a custom <b>apt-get</b> tool or script.</param>
            <remarks>
            <note>
            NeonKUBE deploys a <b>safe-apt-get</b> script that handles situations where
            a package operation is already in progress (such as checking for daily updates).
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.PatchLinux(System.String)">
            <summary>
            Patches Linux on the node applying all outstanding security patches but without 
            upgrading the Linux distribution.
            </summary>
            <param name="aptGetTool">Optionally specifies a custom <b>apt-get</b> tool or script.</param>
            <returns><c>true</c> when a reboot is required.</returns>
            <remarks>
            <note>
            NeonKUBE deploys a <b>safe-apt-get</b> script that handles situations where
            a package operation is already in progress (such as checking for daily updates).
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.UpgradeLinuxDistribution(System.String,System.Boolean)">
            <summary>
            Upgrades to the latest Linux kernel.
            </summary>
            <param name="aptGetTool">
            <para>
            Optionally specifies a custom <b>apt-get</b> tool or compatible
            script to be used for performing the upgrade.
            </para>
            <note>
            NeonKUBE deploys a <b>safe-apt-get</b> script that handles situations where
            a package operation is already in progress (such as checking for daily updates).
            We use this parameter to use this script.
            </note>
            </param>
            <param name="upgradeKernel">
            <para>
            Optionally upgrade to the latest stable kernel.
            </para>
            </param>
            <returns><c>true</c> when a reboot is required.</returns>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.Log(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.LogLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.LogFlush">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.LogException(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.LogException(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.Fault(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.GetConnectionInfo">
            <summary>
            Returns the connection information for SSH.NET.
            </summary>
            <returns>The connection information.</returns>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.Connect(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.WaitForBoot(System.Nullable{System.TimeSpan})">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.OpenSshConnection">
            <summary>
            Opens a new <see cref="T:Renci.SshNet.SshClient"/> connection.
            </summary>
            <returns>The new connection.</returns>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.EnsureSshConnection">
            <summary>
            Ensures that a SSH connection has been established.
            </summary>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.OpenScpConnection">
            <summary>
            Opens a new <see cref="T:Renci.SshNet.ScpClient"/> connection.
            </summary>
            <returns>The new connection.</returns>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.EnsureScpConnection">
            <summary>
            Ensures that an SCP connection has been established.
            </summary>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.CloneSshClient">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.CloneScpClient">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.PrepareHostAndUser">
            <summary>
            <para>
            Ensures that the node is configured such that <see cref="T:Neon.SSH.LinuxSshProxy`1"/> can function properly.
            This includes disabling <b>requiretty</b> as well as restricting <b>sudo</b> from requiring passwords
            as well as creating the minimum user home folders required by the proxy for executing scripts as well
            as uploading and downloading files.
            </para>
            <para>
            This method creates the <see cref="F:Neon.SSH.LinuxSshProxy.SshProxyInitPath"/> file such that these operations will only
            be performed once.
            </para>
            </summary>
            <exception cref="T:Neon.SSH.SshProxyException">
            Thrown if the host hasn't been prepared yet and the SSH connection credentials are not username/password
            or if there's problem with low-level host configuration.
            </exception>
            <remarks>
            <note>
            The first time this method is called on a particular host, password credentials must be used so
            that low-level <b>sudo</b> configuration can be performed.  Subsequent connections can use
            TLS certificates.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.RemoveFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.Download(System.String,System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.DownloadBytes(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.DownloadText(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.DirectoryExists(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.DeleteDirectory(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.FileExists(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.DeleteFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.Upload(System.String,System.IO.Stream,System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.UploadBytes(System.String,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.UploadText(System.String,System.IO.Stream,System.Int32,System.Text.Encoding,System.Text.Encoding,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.UploadText(System.String,System.String,System.Int32,System.Text.Encoding,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.UploadText(System.String,System.Text.StringBuilder,System.Int32,System.Text.Encoding,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.Download(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.FormatCommand(System.String,System.Object[])">
            <summary>
            Formats a Linux command and argument objects into a form suitable for passing
            to the <see cref="M:Neon.SSH.LinuxSshProxy.RunCommand(System.String,System.Object[])"/> or <see cref="M:Neon.SSH.LinuxSshProxy.SudoCommand(System.String,System.Object[])"/>
            methods.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The arguments.</param>
            <returns>The formatted command string.</returns>
            <remarks>
            This method quote arguments with embedded spaces and ignore <c>null</c> arguments.
            The method also converts arguments with types like <c>bool</c> into a Bash compatible
            form.
            </remarks>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.UploadBundle(Neon.SSH.CommandBundle,Neon.SSH.RunOptions)">
            <summary>
            Uploads a command bundle to the server and unpacks it to a temporary folder
            in the user's home folder.
            </summary>
            <param name="bundle">The bundle.</param>
            <param name="runOptions">The command execution options.</param>
            <returns>The path to the folder where the bundle was unpacked.</returns>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.RunCommand(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.SafeScpOperation(System.String,System.Action)">
            <summary>
            Attempts to perform a safe SCP operation up to
            [<see cref="P:Neon.SSH.LinuxSshProxy.RetryCount"/> + 1] times in the face of
            connection failures.
            </summary>
            <param name="name">The operation name (for logging).</param>
            <param name="action">The operation action.</param>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.SafeUpload(System.IO.Stream,System.String)">
            <summary>
            Uploads a file while attempting to deal with transient connection issues.
            </summary>
            <param name="input">The source stream.</param>
            <param name="path">The target path.</param>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.SafeDownload(System.String,System.IO.Stream)">
            <summary>
            Downloads a file while attempting to deal with transient connection issues.
            </summary>
            <param name="path">The source path.</param>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.SafeSshOperation(System.String,System.Action)">
            <summary>
            Attempts to perform a safe SSH command operation up to
            [<see cref="P:Neon.SSH.LinuxSshProxy.RetryCount"/> + 1] times in the face of
            connection failures.
            </summary>
            <param name="name">The operation name (for logging).</param>
            <param name="action">The operation action.</param>
        </member>
        <member name="T:Neon.SSH.LinuxSshProxy.SafeSshCommand">
            <summary>
            Holds the result of a <see cref="M:Neon.SSH.LinuxSshProxy.SafeRunCommand(System.String,System.Boolean)"/> command execution.
            </summary>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.SafeRunCommand(System.String,System.Boolean)">
            <summary>
            Runs the command passed on the server to proactively deal with 
            transient connection issues.
            </summary>
            <param name="command">The command.</param>
            <param name="binaryOutput">Optionally indicates that the standard output should be treated as bunary.</param>
            <returns>The <see cref="T:Renci.SshNet.SshCommand"/> response.</returns>
            <remarks>
            <note>
            The command may not specify file redirection (this is verified by
            <see cref="M:Neon.SSH.LinuxSshProxy.RunCommand(System.String,Neon.SSH.RunOptions,System.Object[])"/>).
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.ToBash(System.String,System.Object[])">
            <summary>
            Returns the command and arguments as a nicely formatted Bash command.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The arguments.</param>
            <returns>The Bash command string.</returns>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.RunCommand(System.String,Neon.SSH.RunOptions,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.RunCommand(Neon.SSH.CommandBundle,Neon.SSH.RunOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.SudoCommand(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.SudoCommand(System.String,Neon.SSH.RunOptions,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.SudoCommandAsUser(System.String,System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.SudoCommandAsUser(System.String,System.String,Neon.SSH.RunOptions,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.SudoCommand(Neon.SSH.CommandBundle,Neon.SSH.RunOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.GetNetworkInterface(System.Net.IPAddress)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.GetTimeUtc">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.Clean(System.Boolean,System.Boolean,System.String)">
            <summary>
            <para>
            Cleans a node by removing unnecessary package manager metadata, cached DHCP information, journald
            logs... and then fills unreferenced file system blocks with zeros so the disk image will or
            trims the file system (when possible) so the image will compress better.
            </para>
            <para>
            This also clears log files, apt package info, cached DHCP addresses, as well as the last
            login info and Bash command history.
            </para>
            </summary>
            <param name="trim">Optionally trims the file system.</param>
            <param name="zero">Optionally zeros unreferenced file system blocks.</param>
            <param name="aptGetTool">Optionally specifies a custom <b>apt-get</b> tool or script.</param>
            <remarks>
            <note>
            NeonKUBE deploys a <b>safe-apt-get</b> script that handles situations where
            a package operation is already in progress (such as checking for daily updates).
            </note>
            </remarks>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.ListDisks(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.ListUnpartitionedDisks">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.ListPartitionedDisks">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.KubectlApply(System.String,Neon.SSH.RunOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.KubeCtlApply(System.Text.StringBuilder,Neon.SSH.RunOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.GetNeonInitStatus">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.SetNeonInitStatus(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.SetPassword(System.String,System.String)">
            <summary>
            Changes a user password.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The new password.</param>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Neon.SSH.LinuxSshProxy`1">
            <summary>
            <para>
            Uses a SSH/SCP connection to provide access to Linux machines to access
            files, run commands, etc.  This extends <see cref="T:Neon.SSH.LinuxSshProxy"/> by 
            adding the <see cref="P:Neon.SSH.LinuxSshProxy`1.Metadata"/> property with a generic type.
            </para>
            <note>
            <b>IMPORTANT:</b> We use this class to manage Ubuntu Linux machines.  This 
            will likely work for Debian and other Debian based distros but other distros 
            like Alpine and Red Hat may have problems or may not work at all.
            </note>
            </summary>
            <typeparam name="TMetadata">
            Defines the metadata type the application wishes to associate with the server.
            You may specify <c>object</c> when no additional metadata is required.
            </typeparam>
            <remarks>
            <para>
            Construct an instance to connect to a specific cluster node.  You may specify
            <typeparamref name="TMetadata"/> to associate application specific information
            or state with the instance.
            </para>
            <para>
            This class includes methods to invoke Linux commands on the node,
            </para>
            <para>
            Call <see cref="M:Neon.SSH.LinuxSshProxy.Dispose"/> or <see cref="M:Neon.SSH.LinuxSshProxy.Disconnect"/> to close the connection.
            </para>
            <note>
            You can use <see cref="M:Neon.SSH.LinuxSshProxy`1.Clone"/> to make a copy of a proxy that can be
            used to perform parallel operations against the same machine.
            </note>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy`1.#ctor(System.String,System.Net.IPAddress,Neon.SSH.SshCredentials,System.Int32,System.IO.TextWriter)">
            <summary>
            Constructs a <see cref="T:Neon.SSH.LinuxSshProxy`1"/>.
            </summary>
            <param name="name">The display name for the server.</param>
            <param name="address">The private cluster IP address for the server.</param>
            <param name="credentials">The credentials to be used for establishing SSH connections.</param>
            <param name="port">Optionally overrides the standard SSH port (22).</param>
            <param name="logWriter">The optional <see cref="T:System.IO.TextWriter"/> where operation logs will be written.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="name"/> or if <paramref name="credentials"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy`1.Dispose(System.Boolean)">
            <summary>
            Releases all associated resources (e.g. any open server connections).
            </summary>
            <param name="disposing">Pass <c>true</c> if we're disposing, <c>false</c> if we're finalizing.</param>
        </member>
        <member name="P:Neon.SSH.LinuxSshProxy`1.Metadata">
            <summary>
            Applications may use this to associate metadata with the instance.
            </summary>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy`1.Clone">
            <summary>
            Returns a clone of the SSH proxy.  This can be useful for situations where you
            need to be able to perform multiple SSH/SCP operations against the same
            machine in parallel.
            </summary>
            <returns>The cloned <see cref="T:Neon.SSH.LinuxSshProxy`1"/>.</returns>
        </member>
        <member name="M:Neon.SSH.LinuxSshProxy`1.CloneTo(Neon.SSH.LinuxSshProxy{`0})">
            <summary>
            Used by derived classes to copy the base class state to a new
            instance as well as configure the new connection's SSH and SCP
            clients.
            </summary>
            <param name="target">The target proxy.</param>
        </member>
        <member name="T:Neon.SSH.NamespaceDoc">
            <summary>
            <para>
            This namespace includes the <see cref="T:Neon.SSH.LinuxSshProxy`1"/>, <see cref="T:Neon.SSH.LinuxSshProxy"/>
            and related classes that wrap and extend the base SSH.NET library clients with additional support for
            managing remote Linux machines via SSH including executing commands, scripts, uploading/downloading files, 
            and performing idempotent operations.  Remote command executions and their results can also be logged
            locally via a <see cref="T:System.IO.TextWriter"/> (using a completely non-standard but still useful logging format).
            </para>
            <para>
            The other major type is <see cref="T:Neon.SSH.CommandBundle"/>.  Command bundles provide a way to upload a 
            script or executable to a temporary working directory and then run the script or program in the 
            context of the working directory so the script or program will have access to the files.Command 
            bundle executions can also tolerate transient network disconnections.
            </para>
            <note>
            This package has been tested against remote machines running Ubuntu 18.04+ and will probably run
            fine on many other Debian-based distributions.  RedHat and other non-Debian distributions probably
            won't be compatible.
            </note>
            </summary>
        </member>
        <member name="T:Neon.SSH.RemoteCommandException">
            <summary>
            Indicates that a remote command execution failed.
            </summary>
        </member>
        <member name="M:Neon.SSH.RemoteCommandException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The optional inner exception.</param>
        </member>
        <member name="T:Neon.SSH.RunOptions">
            <summary>
            Enumerates the possible options to use when executing a remote
            command on a <see cref="T:Neon.SSH.LinuxSshProxy`1"/>.  These options may be 
            combined using the bitwise OR operator.
            </summary>
        </member>
        <member name="F:Neon.SSH.RunOptions.None">
            <summary>
            No options are set.
            </summary>
        </member>
        <member name="F:Neon.SSH.RunOptions.Defaults">
            <summary>
            Bitwise ORs any specific option flags with those specified by <see cref="P:Neon.SSH.LinuxSshProxy.DefaultRunOptions"/>.
            This is handy for setting or resetting flags like <see cref="F:Neon.SSH.RunOptions.FaultOnError"/> on a global 
            basis for a node proxy instance.
            </summary>
        </member>
        <member name="F:Neon.SSH.RunOptions.FaultOnError">
            <summary>
            Puts the <see cref="T:Neon.SSH.LinuxSshProxy`1"/> into the faulted state when the command
            returns a non-zero exit code.
            </summary>
        </member>
        <member name="F:Neon.SSH.RunOptions.RunWhenFaulted">
            <summary>
            Runs the command even if the <see cref="T:Neon.SSH.LinuxSshProxy`1"/> is in the faulted state.
            </summary>
        </member>
        <member name="F:Neon.SSH.RunOptions.IgnoreRemotePath">
            <summary>
            Ignore the <see cref="P:Neon.SSH.LinuxSshProxy.RemotePath"/> property.
            </summary>
        </member>
        <member name="F:Neon.SSH.RunOptions.BinaryOutput">
            <summary>
            Return the standard output from remote command as binary data rather
            than intrepreting it as text.
            </summary>
        </member>
        <member name="F:Neon.SSH.RunOptions.Redact">
            <summary>
            Use for commands that may include sensitive secrets as command arguments
            and/or results.  Only limited information about commands run with this
            flag will be logged.
            </summary>
        </member>
        <member name="F:Neon.SSH.RunOptions.LogOnErrorOnly">
            <summary>
            Logs command output only if the command returns a non-zero exit code.
            </summary>
        </member>
        <member name="F:Neon.SSH.RunOptions.LogOutput">
            <summary>
            Logs the command standard output (standard error output is logged by default).
            </summary>
        </member>
        <member name="F:Neon.SSH.RunOptions.LogBundle">
            <summary>
            Used internally to prevent logging of the command "START: *" line at 
            lower levels because this has already been logged.
            </summary>
        </member>
        <member name="F:Neon.SSH.RunOptions.Audit">
            <summary>
            Used to mark commands whose execution should be logged for auditing.
            </summary>
        </member>
        <member name="F:Neon.SSH.RunOptions.Shutdown">
            <summary>
            <para>
            Indicates that the command will shutdown or restart or reboot
            the target server.  Commands with this flag will not be retried
            on the server.
            </para>
            <note>
            IMPORTANT: You must specify this flag if your command shutdown
            down the machine to prevent causing an infinite reboot loop.
            </note>
            </summary>
        </member>
        <member name="T:Neon.SSH.SshCredentials">
            <summary>
            Provides credentials suitable for connecting to a server machine via SSH.
            </summary>
        </member>
        <member name="M:Neon.SSH.SshCredentials.FromUserPassword(System.String,System.String)">
            <summary>
            Returns credentials based on a user name and password.
            </summary>
            <param name="username">The user name.</param>
            <param name="password">The password.</param>
            <returns>The <see cref="T:Neon.SSH.SshCredentials"/>.</returns>
        </member>
        <member name="M:Neon.SSH.SshCredentials.FromPrivateKey(System.String,System.String,System.String)">
            <summary>
            Returns credentials based on a user name and password and an optional passphrase.
            </summary>
            <param name="username">The user name.</param>
            <param name="privateKey">The unencrypted PEM-encoded private key.</param>
            <param name="passPhrase">Optionally specifies a pass phrase.</param>
            <returns>The <see cref="T:Neon.SSH.SshCredentials"/>.</returns>
        </member>
        <member name="P:Neon.SSH.SshCredentials.None">
            <summary>
            Returns an instance indicating that there are no available credentials.
            </summary>
            <returns>The credentials.</returns>
        </member>
        <member name="P:Neon.SSH.SshCredentials.Username">
            <summary>
            Returns the user name.
            </summary>
        </member>
        <member name="P:Neon.SSH.SshCredentials.AuthenticationMethod">
            <summary>
            Returns the authentication method to be used to establish a SSH.NET session.
            </summary>
            <exception cref="T:Neon.SSH.SshProxyException">Thrown if the SSH credentials are not available.</exception>
        </member>
        <member name="T:Neon.SSH.SshExtensions">
            <summary>
            Renci SSH.NET related extensions.
            </summary>
        </member>
        <member name="M:Neon.SSH.SshExtensions.PathExists(Renci.SshNet.SftpClient,System.String)">
            <summary>
            Determines whether a file or directory exists on the remote machine.
            </summary>
            <param name="sftpClient">The FTP client.</param>
            <param name="path">Path to the file or directory.</param>
            <returns><c>true</c> if the file or directory exists.</returns>
            <remarks>
            The <see cref="M:Renci.SshNet.SftpClient.Exists(System.String)"/> method is supposed to do
            this but it appears throw exceptions when part of the path doesn't
            exist.  This method calls that but catches and handles the exception.
            </remarks>
        </member>
        <member name="T:Neon.SSH.SshProxyException">
            <summary>
            Thrown for <see cref="T:Neon.SSH.LinuxSshProxy`1"/> errors.
            </summary>
        </member>
        <member name="M:Neon.SSH.SshProxyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Specifies the exception message.</param>
            <param name="innerException">Optionally specifies an inner exception.</param>
        </member>
    </members>
</doc>
