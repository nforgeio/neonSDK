<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFrameworks>net6.0; net7.0; net8.0</TargetFrameworks>
        <OutputType>Library</OutputType>
        <RootNamespace>Neon.Service</RootNamespace>
        <Description>Service library supporting application deployment as containers as well as in-process for testing</Description>
        <PackageReleaseNotes>https://github.com/nforgeio/neonSDK/releases</PackageReleaseNotes>
        <IsPackable>true</IsPackable>
        <PackageProjectUrl>https://github.com/nforgeio/neonSDK/blob/master/Lib/Neon.Service/README.md</PackageProjectUrl>
        <RepositoryType>git</RepositoryType>
        <RepositoryUrl>https://github.com/nforgeio/neonSDK</RepositoryUrl>
        <PackageLicenseFile>LICENSE</PackageLicenseFile>
        <Configurations>Debug;Release</Configurations>
        <PackageIcon>nuget-icon.png</PackageIcon>
        <PackageTags>kubernetes docker service</PackageTags>
    </PropertyGroup>

    <ItemGroup>
        <ProjectReference Include="..\..\Lib\Neon.BuildInfo\Neon.BuildInfo.csproj" />
        <ProjectReference Include="..\Neon.Common\Neon.Common.csproj" />
        <ProjectReference Include="..\Neon.Cryptography\Neon.Cryptography.csproj" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'net6.0'">
        <PackageReference Include="Microsoft.Extensions.Telemetry" Version="8.0.0" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'net7.0'">
        <PackageReference Include="Microsoft.Extensions.Telemetry" Version="8.0.0" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'net8.0'">
        <PackageReference Include="Microsoft.Extensions.Telemetry" Version="8.8.0" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="DnsClient" Version="1.7.0" />
        <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" Version="1.9.0" />
        <PackageReference Include="OpenTelemetry.Instrumentation.Http" Version="1.9.0" />
        <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" Version="1.9.0" />
        <PackageReference Include="prometheus-net" Version="8.2.1" />
        <PackageReference Include="prometheus-net.AspNetCore" Version="8.2.1" />
        <PackageReference Include="System.Runtime.Loader" Version="4.3.0" />
    </ItemGroup>
    <ItemGroup>
        <EmbeddedResource Include="Resources/**/*" />
    </ItemGroup>

    <ItemGroup>
        <Folder Include="Properties\" />
        <Folder Include="Resources\" />
    </ItemGroup>

    <ItemGroup>
        <None Include="..\nuget-icon.png" Pack="true" PackagePath="" />
        <None Include="..\..\LICENSE" Pack="true" PackagePath="" />
    </ItemGroup>

    <!--
    NOTE(jefflill):
    ===============
    
    We used to build the Linux health probe executables here via WSL, and that worked
    fine until we added a second target framework.  After that, we started seeing random
    failures building these programs.  After thinking about it, I this is due to
    Visual Studio building the project for target frameworks in parallel.
    
    The workaround is to build these manually and commit the binaries to GitHub.  These
    executables are very simple and will rarely need to be updated if ever.  If you do 
    need to	rebuild these manually, execute these commands:
    
        wsl-util gcc "%NF_ROOT%\Lib\Neon.Service\health-probes\health-check" "%NF_ROOT%\Lib\Neon.Service\Resources\health-check"
        wsl-util gcc "%NF_ROOT%\Lib\Neon.Service\health-probes\ready-check" "%NF_ROOT%\Lib\Neon.Service\Resources\ready-check"
    
    This target builds the [health-check] and [ready-check] probe binaries for Linux.
    These need to be built before the Neon.Service library so they can be embedded
    as resources.
    
    OLD TARGET:
    ===========
    
    These are C programs built via the [wsl-util gcc ...] command.

    <Target Name="BuildProbes" BeforeTargets="Build">
        <Message Importance="high" Text="Building: health-check" />
        <Exec Command="wsl-util gcc &quot;$(NF_ROOT)\Lib\Neon.Service\health-probes\health-check&quot; &quot;$(NF_ROOT)\Lib\Neon.Service\Resources\health-check&quot;" />

        <Message Importance="high" Text="Building: ready-check" />
        <Exec Command="wsl-util gcc &quot;$(NF_ROOT)\Lib\Neon.Service\health-probes\ready-check&quot; &quot;$(NF_ROOT)\Lib\Neon.Service\Resources\ready-check&quot;" />
    </Target>
    -->

</Project>
